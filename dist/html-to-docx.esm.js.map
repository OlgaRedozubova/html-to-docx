{"version":3,"file":"html-to-docx.esm.js","sources":["../src/schemas/content-types.js","../src/helpers/namespaces.js","../src/utils/color-conversion.js","../src/utils/unit-conversion.js","../src/helpers/xml-builder.js","../src/helpers/render-document-file.js","../src/schemas/core.js","../src/schemas/document-rels.js","../src/schemas/rels.js","../src/schemas/font-table.js","../src/schemas/settings.js","../src/schemas/web-settings.js","../src/docx-document.js","../template/document.template.js","../src/schemas/styles.js","../src/schemas/numbering.js","../src/schemas/generic-rels.js","../src/html-to-docx.js","../index.js"],"sourcesContent":["const contentTypesXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <Types xmlns=\"http://schemas.openxmlformats.org/package/2006/content-types\">\n        <Default Extension=\"rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\" />\n        <Default Extension=\"jpeg\" ContentType=\"image/jpeg\"/>\n        <Default Extension=\"png\" ContentType=\"image/png\"/>\n        <Default Extension=\"xml\" ContentType=\"application/xml\"/>\n        <Override PartName=\"/_rels/.rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n        <Override PartName=\"/word/_rels/document.xml.rels\" ContentType=\"application/vnd.openxmlformats-package.relationships+xml\"/>\n        <Override PartName=\"/word/document.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\"/>\n        <Override PartName=\"/word/styles.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\"/>\n        <Override PartName=\"/word/numbering.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\"/>\n        <Override PartName=\"/word/fontTable.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\"/>\n        <Override PartName=\"/docProps/core.xml\" ContentType=\"application/vnd.openxmlformats-package.core-properties+xml\"/>\n        <Override PartName=\"/word/settings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\"/>\n        <Override PartName=\"/word/webSettings.xml\" ContentType=\"application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml\"/>\n    </Types>\n`;\n\nexport default contentTypesXML;\n","const namespaces = {\n  a: 'http://schemas.openxmlformats.org/drawingml/2006/main',\n  b: 'http://schemas.openxmlformats.org/officeDocument/2006/bibliography',\n  cdr: 'http://schemas.openxmlformats.org/drawingml/2006/chartDrawing',\n  dc: 'http://purl.org/dc/elements/1.1/',\n  dcmitype: 'http://purl.org/dc/dcmitype/',\n  dcterms: 'http://purl.org/dc/terms/',\n  o: 'urn:schemas-microsoft-com:office:office',\n  pic: 'http://schemas.openxmlformats.org/drawingml/2006/picture',\n  r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\n  v: 'urn:schemas-microsoft-com:vml',\n  ve: 'http://schemas.openxmlformats.org/markup-compatibility/2006',\n  vt: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',\n  w: 'http://schemas.openxmlformats.org/wordprocessingml/2006/main',\n  m: 'http://schemas.openxmlformats.org/officeDocument/2006/math',\n  w10: 'urn:schemas-microsoft-com:office:word',\n  wp: 'http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing',\n  wne: 'http://schemas.microsoft.com/office/word/2006/wordml',\n  xsd: 'http://www.w3.org/2001/XMLSchema',\n  xsi: 'http://www.w3.org/2001/XMLSchema-instance',\n  numbering: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/numbering',\n  hyperlinks: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',\n  images: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',\n  styles: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',\n  headers: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/header',\n  coreProperties: 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\n  officeDocumentRelation:\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',\n  corePropertiesRelation:\n    'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',\n  settingsRelation: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/settings',\n  webSettingsRelation:\n    'http://schemas.openxmlformats.org/officeDocument/2006/relationships/webSettings',\n  sl: 'http://schemas.openxmlformats.org/schemaLibrary/2006/main',\n  a14: \"http://schemas.microsoft.com/office/drawing/2010/main\",\n  asvg: \"http://schemas.microsoft.com/office/drawing/2016/SVG/main\"\n};\n\nexport default namespaces;\n","/* eslint-disable no-param-reassign */\n\nexport const rgbRegex = /rgb\\((\\d+),\\s*([\\d.]+),\\s*([\\d.]+)\\)/i;\nexport const hslRegex = /hsl\\((\\d+),\\s*([\\d.]+)%,\\s*([\\d.]+)%\\)/i;\nexport const hexRegex = /#([0-9A-F]{6})/i;\nexport const hex3Regex = /#([0-9A-F])([0-9A-F])([0-9A-F])/i;\n\n// eslint-disable-next-line import/prefer-default-export\nexport const rgbToHex = (red, green, blue) => {\n  const hexColorCode = [red, green, blue]\n    .map((x) => {\n      // eslint-disable-next-line radix, no-param-reassign\n      x = parseInt(x).toString(16);\n      return x.length === 1 ? `0${x}` : x;\n    })\n    .join('');\n\n  return hexColorCode;\n};\n\nexport const hslToHex = (hue, saturation, luminosity) => {\n  hue /= 360;\n  saturation /= 100;\n  luminosity /= 100;\n  // eslint-disable-next-line one-var\n  let red, green, blue;\n  if (saturation === 0) {\n    // eslint-disable-next-line no-multi-assign\n    red = green = blue = luminosity; // achromatic\n  } else {\n    const hue2rgb = (p, q, t) => {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n    const q =\n      luminosity < 0.5\n        ? luminosity * (1 + saturation)\n        : luminosity + saturation - luminosity * saturation;\n    const p = 2 * luminosity - q;\n    red = hue2rgb(p, q, hue + 1 / 3);\n    green = hue2rgb(p, q, hue);\n    blue = hue2rgb(p, q, hue - 1 / 3);\n  }\n  return [red, green, blue]\n    .map((x) => {\n      const hex = Math.round(x * 255).toString(16);\n      return hex.length === 1 ? `0${hex}` : hex;\n    })\n    .join('');\n};\n\nexport const hex3ToHex = (red, green, blue) => {\n  const hexColorCode = [red, green, blue].map((x) => `${x}${x}`).join('');\n\n  return hexColorCode;\n};\n","export const defaultHeadingSizesInPixel = {\n  h1: 32,\n  h2: 24,\n  h3: 18.72,\n  h4: 16,\n  h5: 13.28,\n  h6: 10.72,\n};\n\nexport const pixelRegex = /([\\d.]+)px/i;\nexport const percentageRegex = /([\\d.]+)%/i;\nexport const pointRegex = /(\\d+)pt/i;\nexport const cmRegex = /([\\d.]+)cm/i;\nexport const inchRegex = /([\\d.]+)in/i;\n\nexport const pixelToEMU = (pixelValue) => {\n  return Math.round(pixelValue * 9525);\n};\n\nexport const EMUToPixel = (EMUValue) => {\n  return Math.round(EMUValue / 9525);\n};\n\nexport const TWIPToEMU = (TWIPValue) => {\n  return Math.round(TWIPValue * 635);\n};\n\nexport const EMUToTWIP = (EMUValue) => {\n  return Math.round(EMUValue / 635);\n};\n\nexport const pointToTWIP = (pointValue) => {\n  return Math.round(pointValue * 20);\n};\n\nexport const TWIPToPoint = (TWIPValue) => {\n  return Math.round(TWIPValue / 20);\n};\n\nexport const pointToHIP = (pointValue) => {\n  return Math.round(pointValue * 2);\n};\n\nexport const HIPToPoint = (HIPValue) => {\n  return Math.round(HIPValue / 2);\n};\n\nexport const HIPToTWIP = (HIPValue) => {\n  return Math.round(HIPValue * 10);\n};\n\nexport const TWIPToHIP = (TWIPValue) => {\n  return Math.round(TWIPValue / 10);\n};\n\nexport const pixelToTWIP = (pixelValue) => {\n  return EMUToTWIP(pixelToEMU(pixelValue));\n};\n\nexport const TWIPToPixel = (TWIPValue) => {\n  return EMUToPixel(TWIPToEMU(TWIPValue));\n};\n\nexport const pixelToHIP = (pixelValue) => {\n  return TWIPToHIP(EMUToTWIP(pixelToEMU(pixelValue)));\n};\n\nexport const HIPToPixel = (HIPValue) => {\n  return EMUToPixel(TWIPToEMU(HIPToTWIP(HIPValue)));\n};\n\nexport const inchToPoint = (inchValue) => {\n  return Math.round(inchValue * 72);\n};\n\nexport const inchToTWIP = (inchValue) => {\n  return pointToTWIP(inchToPoint(inchValue));\n};\n\nexport const cmToInch = (cmValue) => {\n  return cmValue * 0.3937008;\n};\n\nexport const cmToTWIP = (cmValue) => {\n  return inchToTWIP(cmToInch(cmValue));\n};\n\nexport const pixelToPoint = (pixelValue) => {\n  return HIPToPoint(pixelToHIP(pixelValue));\n};\n\nexport const pointToPixel = (pointValue) => {\n  return HIPToPixel(pointToHIP(pointValue));\n};\n\nexport const EIPToPoint = (EIPValue) => {\n  return Math.round(EIPValue / 8);\n};\n\nexport const pointToEIP = (PointValue) => {\n  return Math.round(PointValue * 8);\n};\n\nexport const pixelToEIP = (pixelValue) => {\n  return pointToEIP(pixelToPoint(pixelValue));\n};\n\nexport const EIPToPixel = (EIPValue) => {\n  return pointToPixel(EIPToPoint(EIPValue));\n};\n","/* eslint-disable no-param-reassign */\n/* eslint-disable no-case-declarations */\n/* eslint-disable no-plusplus */\n/* eslint-disable no-else-return */\nimport { fragment } from 'xmlbuilder2';\n\n// eslint-disable-next-line import/no-named-default\nimport { default as namespaces } from './namespaces';\nimport {\n  rgbToHex,\n  hslToHex,\n  hslRegex,\n  rgbRegex,\n  hexRegex,\n  hex3Regex,\n  hex3ToHex,\n} from '../utils/color-conversion';\nimport {\n  pixelToEMU,\n  pixelRegex,\n  TWIPToEMU,\n  percentageRegex,\n  pointRegex,\n  pointToHIP,\n  HIPToTWIP,\n  pointToTWIP,\n  pixelToHIP,\n  pixelToTWIP,\n  pixelToEIP,\n  pointToEIP,\n} from '../utils/unit-conversion';\n// FIXME: remove the cyclic dependency\n// eslint-disable-next-line import/no-cycle\nimport { buildImage } from './render-document-file';\n\nconst isVNode = require('virtual-dom/vnode/is-vnode');\nconst isVText = require('virtual-dom/vnode/is-vtext');\nconst colorNames = require('color-name');\nconst VText = require('virtual-dom/vnode/vtext');\n\n// eslint-disable-next-line consistent-return\nconst fixupColorCode = (colorCodeString) => {\n  if (Object.prototype.hasOwnProperty.call(colorNames, colorCodeString.toLowerCase())) {\n    const [red, green, blue] = colorNames[colorCodeString.toLowerCase()];\n\n    return rgbToHex(red, green, blue);\n  } else if (rgbRegex.test(colorCodeString)) {\n    const matchedParts = colorCodeString.match(rgbRegex);\n    const red = matchedParts[1];\n    const green = matchedParts[2];\n    const blue = matchedParts[3];\n\n    return rgbToHex(red, green, blue);\n  } else if (hslRegex.test(colorCodeString)) {\n    const matchedParts = colorCodeString.match(hslRegex);\n    const hue = matchedParts[1];\n    const saturation = matchedParts[2];\n    const luminosity = matchedParts[3];\n\n    return hslToHex(hue, saturation, luminosity);\n  } else if (hexRegex.test(colorCodeString)) {\n    const matchedParts = colorCodeString.match(hexRegex);\n\n    return matchedParts[1];\n  } else if (hex3Regex.test(colorCodeString)) {\n    const matchedParts = colorCodeString.match(hex3Regex);\n    const red = matchedParts[1];\n    const green = matchedParts[2];\n    const blue = matchedParts[3];\n\n    return hex3ToHex(red, green, blue);\n  } else {\n    return '000000';\n  }\n};\n\nconst buildTableRowHeight = (tableRowHeight) => {\n  const tableRowHeightFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'trHeight')\n    .att('@w', 'val', tableRowHeight)\n    .att('@w', 'hRule', 'atLeast')\n    .up();\n\n  return tableRowHeightFragment;\n};\n\nconst buildVerticalAlignment = (verticalAlignment) => {\n  if (verticalAlignment.toLowerCase() === 'middle') {\n    verticalAlignment = 'center';\n  }\n\n  const verticalAlignmentFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'vAlign')\n    .att('@w', 'val', verticalAlignment)\n    .up();\n\n  return verticalAlignmentFragment;\n};\n\nconst buildColor = (colorCode) => {\n  const colorFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'color')\n    .att('@w', 'val', colorCode)\n    .up();\n\n  return colorFragment;\n};\n\nconst buildFontSize = (fontSize) => {\n  const fontSizeFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'sz')\n    .att('@w', 'val', fontSize)\n    .up();\n\n  return fontSizeFragment;\n};\n\nconst buildShading = (colorCode) => {\n  const shadingFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'shd')\n    .att('@w', 'val', 'clear')\n    .att('@w', 'fill', colorCode)\n    .up();\n\n  return shadingFragment;\n};\n\nconst buildHighlight = (color = 'yellow') => {\n  const highlightFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'highlight')\n    .att('@w', 'val', color)\n    .up();\n\n  return highlightFragment;\n};\n\nconst buildVertAlign = (type = 'subscript') => {\n  const vertAlignFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'vertAlign')\n    .att('@w', 'val', type)\n    .up();\n\n  return vertAlignFragment;\n};\n\nconst buildStrike = () => {\n  const strikeFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'strike')\n    .att('@w', 'val', true)\n    .up();\n\n  return strikeFragment;\n};\n\nconst buildBold = () => {\n  const boldFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'b')\n    .up();\n\n  return boldFragment;\n};\n\nconst buildItalics = () => {\n  const italicsFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'i')\n    .up();\n\n  return italicsFragment;\n};\n\nconst buildUnderline = (type = 'single') => {\n  const underlineFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'u')\n    .att('@w', 'val', type)\n    .up();\n\n  return underlineFragment;\n};\n\nconst buildLineBreak = (type = 'textWrapping') => {\n  const lineBreakFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'br')\n    .att('@w', 'type', type)\n    .up();\n\n  return lineBreakFragment;\n};\n\nconst buildBorder = (\n  borderSide = 'top',\n  borderSize = 0,\n  borderSpacing = 0,\n  borderColor = fixupColorCode('black'),\n  borderStroke = 'single'\n) => {\n  const borderFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', borderSide)\n    .att('@w', 'val', borderStroke)\n    .att('@w', 'sz', borderSize)\n    .att('@w', 'space', borderSpacing)\n    .att('@w', 'color', borderColor)\n    .up();\n\n  return borderFragment;\n};\n\nconst buildTextElement = (text) => {\n  const textFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 't')\n    .att('@xml', 'space', 'preserve')\n    .txt(text)\n    .up();\n\n  return textFragment;\n};\n\nconst buildRunProperties = (attributes) => {\n  const runPropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'rPr');\n  if (attributes && attributes.constructor === Object) {\n    Object.keys(attributes).forEach((key) => {\n      // eslint-disable-next-line default-case\n      switch (key) {\n        case 'strong':\n          const boldFragment = buildBold();\n          runPropertiesFragment.import(boldFragment);\n          break;\n        case 'i':\n          const italicsFragment = buildItalics();\n          runPropertiesFragment.import(italicsFragment);\n          break;\n        case 'u':\n          const underlineFragment = buildUnderline();\n          runPropertiesFragment.import(underlineFragment);\n          break;\n        case 'color':\n          const colorFragment = buildColor(attributes[key]);\n          runPropertiesFragment.import(colorFragment);\n          break;\n        case 'backgroundColor':\n          const shadingFragment = buildShading(attributes[key]);\n          runPropertiesFragment.import(shadingFragment);\n          break;\n        case 'fontSize':\n          const fontSizeFragment = buildFontSize(attributes[key]);\n          runPropertiesFragment.import(fontSizeFragment);\n          break;\n      }\n    });\n  }\n  runPropertiesFragment.up();\n\n  return runPropertiesFragment;\n};\n\n// eslint-disable-next-line consistent-return\nconst buildTextFormatting = (vNode) => {\n  // eslint-disable-next-line default-case\n  switch (vNode.tagName) {\n    case 'strong':\n    case 'b':\n      const boldFragment = buildBold();\n      return boldFragment;\n    case 'em':\n    case 'i':\n      const italicsFragment = buildItalics();\n      return italicsFragment;\n    case 'ins':\n    case 'u':\n      const underlineFragment = buildUnderline();\n      return underlineFragment;\n    case 'strike':\n    case 'del':\n    case 's':\n      const strikeFragment = buildStrike();\n      return strikeFragment;\n    case 'sub':\n      const subscriptFragment = buildVertAlign('subscript');\n      return subscriptFragment;\n    case 'sup':\n      const superscriptFragment = buildVertAlign('subscript');\n      return superscriptFragment;\n    case 'mark':\n      const highlightFragment = buildHighlight();\n      return highlightFragment;\n  }\n};\n\nconst buildRun = (vNode, attributes) => {\n  const runFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'r');\n  const runPropertiesFragment = buildRunProperties(attributes);\n\n  if (\n    isVNode(vNode) &&\n    [\n      'span',\n      'strong',\n      'b',\n      'em',\n      'i',\n      'u',\n      'ins',\n      'strike',\n      'del',\n      's',\n      'sub',\n      'sup',\n      'mark',\n    ].includes(vNode.tagName)\n  ) {\n    const textArray = [];\n\n    let vNodes = [vNode];\n    while (vNodes.length) {\n      const tempVNode = vNodes.shift();\n      if (isVText(tempVNode)) {\n        textArray.push(tempVNode.text);\n      }\n      if (\n        isVNode(tempVNode) &&\n        ['strong', 'b', 'em', 'i', 'u', 'ins', 'strike', 'del', 's', 'sub', 'sup', 'mark'].includes(\n          tempVNode.tagName\n        )\n      ) {\n        const formattingFragment = buildTextFormatting(tempVNode);\n        runPropertiesFragment.import(formattingFragment);\n      }\n\n      if (tempVNode.children && tempVNode.children.length) {\n        vNodes = tempVNode.children.slice().concat(vNodes);\n      }\n    }\n    if (textArray.length) {\n      const combinedString = textArray.join('');\n      // eslint-disable-next-line no-param-reassign\n      vNode = new VText(combinedString);\n    }\n  }\n\n  runFragment.import(runPropertiesFragment);\n  if (isVText(vNode)) {\n    const textFragment = buildTextElement(vNode.text);\n    runFragment.import(textFragment);\n  } else if (attributes && (attributes.type === 'picture' || attributes.type === 'picture_svg')) {\n    const { type, inlineOrAnchored, ...otherAttributes } = attributes;\n    // eslint-disable-next-line no-use-before-define\n    const imageFragment = buildDrawing(inlineOrAnchored, type, otherAttributes);\n    runFragment.import(imageFragment);\n  } else if (isVNode(vNode) && vNode.tagName === 'br') {\n    const lineBreakFragment = buildLineBreak();\n    runFragment.import(lineBreakFragment);\n  }\n  runFragment.up();\n\n  return runFragment;\n};\n\n// eslint-disable-next-line consistent-return\nconst fixupLineHeight = (lineHeight, fontSize) => {\n  // FIXME: If line height is anything other than a number\n  // eslint-disable-next-line no-restricted-globals\n  if (!isNaN(lineHeight)) {\n    if (fontSize) {\n      const actualLineHeight = +lineHeight * fontSize;\n\n      return HIPToTWIP(actualLineHeight);\n    } else {\n      // 240 TWIP or 12 point is default line height\n      return +lineHeight * 240;\n    }\n  } else {\n    // 240 TWIP or 12 point is default line height\n    return 240;\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst fixupFontSize = (fontSizeString) => {\n  if (pointRegex.test(fontSizeString)) {\n    const matchedParts = fontSizeString.match(pointRegex);\n    // convert point to half point\n    return pointToHIP(matchedParts[1]);\n  } else if (pixelRegex.test(fontSizeString)) {\n    const matchedParts = fontSizeString.match(pixelRegex);\n    // convert pixels to half point\n    return pixelToHIP(matchedParts[1]);\n  }\n};\n\n// eslint-disable-next-line consistent-return\nconst fixupRowHeight = (rowHeightString) => {\n  if (pointRegex.test(rowHeightString)) {\n    const matchedParts = rowHeightString.match(pointRegex);\n    // convert point to half point\n    return pointToTWIP(matchedParts[1]);\n  } else if (pixelRegex.test(rowHeightString)) {\n    const matchedParts = rowHeightString.match(pixelRegex);\n    // convert pixels to half point\n    return pixelToTWIP(matchedParts[1]);\n  }\n};\n\nconst buildRunOrRuns = (vNode, attributes) => {\n  if (isVNode(vNode) && vNode.tagName === 'span') {\n    const runFragments = [];\n\n    for (let index = 0; index < vNode.children.length; index++) {\n      const childVNode = vNode.children[index];\n      const modifiedAttributes = { ...attributes };\n      if (isVNode(vNode) && vNode.properties && vNode.properties.style) {\n        if (\n          vNode.properties.style.color &&\n          !['transparent', 'auto'].includes(vNode.properties.style.color)\n        ) {\n          modifiedAttributes.color = fixupColorCode(vNode.properties.style.color);\n        }\n        if (\n          vNode.properties.style['background-color'] &&\n          !['transparent', 'auto'].includes(vNode.properties.style['background-color'])\n        ) {\n          modifiedAttributes.backgroundColor = fixupColorCode(\n            vNode.properties.style['background-color']\n          );\n        }\n        if (vNode.properties.style['font-size']) {\n          modifiedAttributes.fontSize = fixupFontSize(vNode.properties.style['font-size']);\n        }\n      }\n      runFragments.push(buildRun(childVNode, modifiedAttributes));\n    }\n\n    return runFragments;\n  } else {\n    const runFragment = buildRun(vNode, attributes);\n\n    return runFragment;\n  }\n};\n\nconst buildRunOrHyperLink = (vNode, attributes, docxDocumentInstance) => {\n  if (isVNode(vNode) && vNode.tagName === 'a') {\n    const relationshipId = docxDocumentInstance.createDocumentRelationships(\n      docxDocumentInstance.relationshipFilename,\n      'hyperlink',\n      vNode.properties && vNode.properties.href ? vNode.properties.href : ''\n    );\n    const hyperlinkFragment = fragment({\n      namespaceAlias: { w: namespaces.w, r: namespaces.r },\n    })\n      .ele('@w', 'hyperlink')\n      .att('@r', 'id', `rId${relationshipId}`);\n\n    const runFragments = buildRunOrRuns(vNode.children[0], attributes);\n    if (Array.isArray(runFragments)) {\n      for (let index = 0; index < runFragments.length; index++) {\n        const runFragment = runFragments[index];\n\n        hyperlinkFragment.import(runFragment);\n      }\n    } else {\n      hyperlinkFragment.import(runFragments);\n    }\n    hyperlinkFragment.up();\n\n    return hyperlinkFragment;\n  }\n  const runFragments = buildRunOrRuns(vNode, attributes);\n\n  return runFragments;\n};\n\nconst buildNumberingProperties = (levelId, numberingId) => {\n  const numberingPropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'numPr')\n    .ele('@w', 'ilvl')\n    .att('@w', 'val', String(levelId))\n    .up()\n    .ele('@w', 'numId')\n    .att('@w', 'val', String(numberingId))\n    .up()\n    .up();\n\n  return numberingPropertiesFragment;\n};\n\nconst buildNumberingInstances = () => {\n  const numberingInstancesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'num')\n    .ele('@w', 'abstractNumId')\n    .up()\n    .up();\n\n  return numberingInstancesFragment;\n};\n\nconst buildSpacing = (lineSpacing, beforeSpacing, afterSpacing) => {\n  const spacingFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'spacing');\n\n  if (lineSpacing) {\n    spacingFragment.att('@w', 'line', lineSpacing);\n  }\n  if (beforeSpacing) {\n    spacingFragment.att('@w', 'before', beforeSpacing);\n  }\n  if (afterSpacing) {\n    spacingFragment.att('@w', 'after', afterSpacing);\n  }\n\n  spacingFragment.att('@w', 'lineRule', 'exact').up();\n\n  return spacingFragment;\n};\n\nconst buildIndentation = () => {\n  const indentationFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'ind')\n    .up();\n\n  return indentationFragment;\n};\n\nconst buildHorizontalAlignment = (horizontalAlignment) => {\n  if (horizontalAlignment === 'justify') {\n    horizontalAlignment = 'both';\n  }\n  const horizontalAlignmentFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'jc')\n    .att('@w', 'val', horizontalAlignment)\n    .up();\n\n  return horizontalAlignmentFragment;\n};\n\nconst buildParagraphBorder = () => {\n  const paragraphBorderFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'pBdr');\n  const bordersObject = {\n    top: {\n      size: 0,\n      spacing: 3,\n      color: 'FFFFFF',\n    },\n    left: {\n      size: 0,\n      spacing: 3,\n      color: 'FFFFFF',\n    },\n    bottom: {\n      size: 0,\n      spacing: 3,\n      color: 'FFFFFF',\n    },\n    right: {\n      size: 0,\n      spacing: 3,\n      color: 'FFFFFF',\n    },\n  };\n\n  Object.keys(bordersObject).forEach((borderName) => {\n    if (bordersObject[borderName]) {\n      const { size, spacing, color } = bordersObject[borderName];\n\n      const borderFragment = buildBorder(borderName, size, spacing, color);\n      paragraphBorderFragment.import(borderFragment);\n    }\n  });\n\n  paragraphBorderFragment.up();\n\n  return paragraphBorderFragment;\n};\n\nconst buildParagraphProperties = (attributes) => {\n  const paragraphPropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'pPr');\n  if (attributes && attributes.constructor === Object) {\n    Object.keys(attributes).forEach((key) => {\n      // eslint-disable-next-line default-case\n      switch (key) {\n        case 'numbering':\n          const { levelId, numberingId } = attributes[key];\n          const numberingPropertiesFragment = buildNumberingProperties(levelId, numberingId);\n          paragraphPropertiesFragment.import(numberingPropertiesFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.numbering;\n          break;\n        case 'textAlign':\n          const horizontalAlignmentFragment = buildHorizontalAlignment(attributes[key]);\n          paragraphPropertiesFragment.import(horizontalAlignmentFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.textAlign;\n          break;\n        case 'backgroundColor':\n          // Add shading to Paragraph Properties only if display is block\n          // Essentially if background color needs to be across the row\n          if (attributes.display === 'block') {\n            const shadingFragment = buildShading(attributes[key]);\n            paragraphPropertiesFragment.import(shadingFragment);\n            // FIXME: Inner padding in case of shaded paragraphs.\n            const paragraphBorderFragment = buildParagraphBorder();\n            paragraphPropertiesFragment.import(paragraphBorderFragment);\n            // Delete used property\n            // eslint-disable-next-line no-param-reassign\n            delete attributes.backgroundColor;\n          }\n          break;\n      }\n    });\n\n    const spacingFragment = buildSpacing(\n      attributes.lineHeight,\n      attributes.beforeSpacing,\n      attributes.afterSpacing\n    );\n    // Delete used properties\n    // eslint-disable-next-line no-param-reassign\n    delete attributes.lineHeight;\n    // eslint-disable-next-line no-param-reassign\n    delete attributes.beforeSpacing;\n    // eslint-disable-next-line no-param-reassign\n    delete attributes.afterSpacing;\n\n    paragraphPropertiesFragment.import(spacingFragment);\n  }\n  paragraphPropertiesFragment.up();\n\n  return paragraphPropertiesFragment;\n};\n\nconst computeImageDimensions = (vNode, attributes) => {\n  const { maximumWidth, originalWidth, originalHeight } = attributes;\n  const aspectRatio = originalWidth / originalHeight;\n  const maximumWidthInEMU = TWIPToEMU(maximumWidth);\n  let originalWidthInEMU = pixelToEMU(originalWidth);\n  let originalHeightInEMU = pixelToEMU(originalHeight);\n  if (originalWidthInEMU > maximumWidthInEMU) {\n    originalWidthInEMU = maximumWidthInEMU;\n    originalHeightInEMU = Math.round(originalWidthInEMU / aspectRatio);\n  }\n  let modifiedHeight;\n  let modifiedWidth;\n\n  if (vNode.properties && vNode.properties.style) {\n    if (vNode.properties.style.width) {\n      if (vNode.properties.style.width !== 'auto') {\n        if (pixelRegex.test(vNode.properties.style.width)) {\n          modifiedWidth = pixelToEMU(vNode.properties.style.width.match(pixelRegex)[1]);\n        } else if (percentageRegex.test(vNode.properties.style.width)) {\n          const percentageValue = vNode.properties.style.width.match(percentageRegex)[1];\n\n          modifiedWidth = Math.round((percentageValue / 100) * originalWidthInEMU);\n        }\n      } else {\n        // eslint-disable-next-line no-lonely-if\n        if (vNode.properties.style.height && vNode.properties.style.height === 'auto') {\n          modifiedWidth = originalWidthInEMU;\n          modifiedHeight = originalHeightInEMU;\n        }\n      }\n    }\n    if (vNode.properties.style.height) {\n      if (vNode.properties.style.height !== 'auto') {\n        if (pixelRegex.test(vNode.properties.style.height)) {\n          modifiedHeight = pixelToEMU(vNode.properties.style.height.match(pixelRegex)[1]);\n        } else if (percentageRegex.test(vNode.properties.style.height)) {\n          const percentageValue = vNode.properties.style.width.match(percentageRegex)[1];\n\n          modifiedHeight = Math.round((percentageValue / 100) * originalHeightInEMU);\n          if (!modifiedWidth) {\n            modifiedWidth = Math.round(modifiedHeight * aspectRatio);\n          }\n        }\n      } else {\n        // eslint-disable-next-line no-lonely-if\n        if (modifiedWidth) {\n          if (!modifiedHeight) {\n            modifiedHeight = Math.round(modifiedWidth / aspectRatio);\n          }\n        } else {\n          modifiedHeight = originalHeightInEMU;\n          modifiedWidth = originalWidthInEMU;\n        }\n      }\n    }\n    if (modifiedWidth && !modifiedHeight) {\n      modifiedHeight = Math.round(modifiedWidth / aspectRatio);\n    } else if (modifiedHeight && !modifiedWidth) {\n      modifiedWidth = Math.round(modifiedHeight * aspectRatio);\n    }\n  } else {\n    modifiedWidth = originalWidthInEMU;\n    modifiedHeight = originalHeightInEMU;\n  }\n\n  // eslint-disable-next-line no-param-reassign\n  attributes.width = modifiedWidth;\n  // eslint-disable-next-line no-param-reassign\n  attributes.height = modifiedHeight;\n};\n\nconst mathFonts = () => {\n  const mathFragment =  fragment({\n    namespaceAlias: {\n      w: namespaces.w\n    },\n  })\n    .ele('@w', 'rPr')\n    .ele('@w', 'rFonts')\n    .att('@w', 'ascii', 'Cambria Math')\n    .att('@w', 'hAnsi', 'Cambria Math')\n    .up()\n    .up();\n\n  return mathFragment;\n};\n\nconst m_rPr = () => {\n  const mathFragment =  fragment({\n    namespaceAlias: {\n      m: namespaces.m\n    },\n  })\n    .ele('@m', 'rPr')\n    .ele('@m', 'sty')\n    .att('@m', 'val', 'p')\n    .up()\n    .up();\n\n  return mathFragment;\n};\n\nconst ctrlPr = () => {\n  const mathFragment =  fragment({\n    namespaceAlias: {\n      m: namespaces.m\n    },\n  })\n    .ele('@m', 'ctrlPr');\n\n  mathFragment.import(mathFonts());\n  mathFragment\n    .up();\n\n  return mathFragment;\n};\n\nconst fPr = () => {\n  const mathFragment =  fragment({\n    namespaceAlias: {\n      m: namespaces.m\n    },\n  })\n    .ele('@m', 'fPr');\n\n  mathFragment.import(ctrlPr());\n  mathFragment\n    .up();\n\n  return mathFragment;\n};\n\nconst sSupPr = () => {\n  const mathFragment =  fragment({\n    namespaceAlias: {\n      m: namespaces.m\n    },\n  })\n    .ele('@m', 'sSupPr');\n  mathFragment.import(ctrlPr());\n\n  mathFragment\n    .up();\n  return mathFragment;\n};\n\nconst buildMathTextElement = (text) => {\n  const textFragment = fragment({\n    namespaceAlias: { m: namespaces.m },\n  })\n    .ele('@m', 't')\n    .txt(text)\n    .up();\n\n  return textFragment;\n};\n\nconst build_mr = (vNode, isSet_m_rPr = false) => {\n  const mf_r = fragment({\n    namespaceAlias: { m: namespaces.m },\n  })\n    .ele('@m', 'r');\n  if (isSet_m_rPr) {\n    mf_r.import(m_rPr());\n  }\n\n  mf_r.import(mathFonts());\n\n  let child1;\n  if (vNode.children.length) {\n    for (let i = 0; i < vNode.children.length; i++) {\n      if (isVText(vNode.children[i])) {\n        child1 = buildMathTextElement(vNode.children[i].text);\n      } else {\n        console.log('!!! Not Is text => ', vNode.children[i])\n      }\n    }\n  }\n\n  mf_r.import(child1);\n\n  mf_r.up();\n\n  return mf_r;\n};\n\n\n\nconst buildChildMath = (vNode, isSet_m_rPr = false) => {\n  let mathFragment;\n\n  switch (vNode.tagName) {\n    case 'mfrac':\n      mathFragment = fragment({\n        namespaceAlias: { m: namespaces.m },\n      })\n        .ele('@m', 'f');\n\n      const fPrFragment = fPr();\n      mathFragment.import(fPrFragment);\n\n      const m_f_num = fragment({\n        namespaceAlias: { m: namespaces.m },\n      })\n        .ele('@m', 'num');\n\n      //num\n      if (vNode.children.length) {\n        if (vNode.children.length === 2) {\n          const vNode1 = vNode.children[0];\n          if (vNode1.tagName === 'mrow' && vNode1.children.length) {\n            for (let i = 0; i < vNode1.children.length; i++) {\n              const childFragment = buildChildMath(vNode1.children[i]);\n              m_f_num.import(childFragment);\n            }\n          } else {\n            const childFragment = buildChildMath(vNode1);\n            m_f_num.import(childFragment);\n          }\n\n          m_f_num.up();\n          mathFragment.import(m_f_num);\n\n          const vNode2 = vNode.children[1];\n\n          const m_f_den = fragment({\n            namespaceAlias: { m: namespaces.m },\n          })\n            .ele('@m', 'den');\n\n          if (vNode2.tagName === 'mrow' && vNode2.children.length) {\n            for (let i = 0; i < vNode2.children.length; i++) {\n              const childFragment = buildChildMath(vNode2.children[i]);\n              m_f_den.import(childFragment);\n            }\n          } else {\n            const childFragment = buildChildMath(vNode2);\n            m_f_den.import(childFragment);\n          }\n\n          m_f_den.up();\n          mathFragment.import(m_f_den);\n          mathFragment.up();\n        }\n      }\n\n      break;\n    case 'mrow':\n      mathFragment = fragment({\n        namespaceAlias: { m: namespaces.m },\n      })\n        .ele('@m', 'num');\n      break;\n    case 'mo':\n      mathFragment = build_mr(vNode);\n      break;\n    case 'mn':\n      if (vNode.children.length) {\n        for (let i = 0; i < vNode.children.length; i++) {\n          if (isVText(vNode.children[i])) {\n            mathFragment = buildMathTextElement(vNode.children[i].text);\n          } else {\n            console.log('!!! Not Is text => ', vNode.children[i])\n          }\n        }\n      }\n      break;\n    case 'mi':\n      mathFragment = build_mr(vNode, isSet_m_rPr);\n\n      break;\n    case 'msup':\n      mathFragment = fragment({\n        namespaceAlias: { m: namespaces.m },\n      })\n        .ele('@m', 'sSup');\n      const sSupPrFragment = sSupPr();\n      mathFragment.import(sSupPrFragment);\n\n      if (vNode.children.length) {\n        if (vNode.children.length === 2) {\n\n          // ---  e_vNode ----\n          const e_vNode = vNode.children[0];\n          const mf_e = fragment({\n            namespaceAlias: { m: namespaces.m },\n          })\n            .ele('@m', 'e');\n\n          const mf_e_r = buildChildMath(e_vNode, true);\n\n\n          mf_e.import(mf_e_r);\n          mf_e.up();\n\n          mathFragment.import(mf_e);\n\n\n          // ---  sup_vNode ----\n\n          const mf_sup = fragment({\n            namespaceAlias: { m: namespaces.m },\n          })\n            .ele('@m', 'sup');\n\n          const mf_sup_r = fragment({\n            namespaceAlias: { m: namespaces.m },\n          })\n            .ele('@m', 'r');\n          mf_sup_r.import(mathFonts());\n\n          const sup_vNode = vNode.children[1].tagName === 'mrow'\n            ? vNode.children[1].children[0]\n            : vNode.children[1];\n\n          const child2 = buildChildMath(sup_vNode);\n          mf_sup_r.import(child2);\n\n          mf_sup_r.up();\n\n          mf_sup.import(mf_sup_r);\n          mf_sup.up();\n\n          mathFragment.import(mf_sup);\n\n        }\n      }\n\n      mathFragment.up();\n      break;\n  }\n\n  if (!mathFragment) {\n    return null\n  }\n\n  if (vNode.tagName === 'mi' || vNode.tagName === 'mn'\n    || vNode.tagName === 'msup'\n    || vNode.tagName === 'mfrac'\n  ) {\n    return mathFragment;\n  }\n\n  if (isVNode(vNode) && vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    for (let i = 0; i < vNode.children.length; i++) {\n      const childFragment = buildChildMath(vNode.children[i]);\n      if (childFragment) {\n        mathFragment.import(childFragment);\n      }\n    }\n  }\n\n  mathFragment.up();\n  return mathFragment;\n\n};\n\nconst buildMath = (vNode, attributes, docxDocumentInstanc) => {\n  const mathFragment = fragment({\n    namespaceAlias: { m: namespaces.m },\n  })\n    .ele('@m', 'oMath');\n\n  if (isVNode(vNode) && vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    for (let i = 0; i < vNode.children.length; i++) {\n      const childFragment = buildChildMath(vNode.children[i]);\n      if (childFragment) {\n        mathFragment.import(childFragment);\n      }\n    }\n  }\n\n  mathFragment.up();\n  return mathFragment;\n};\n\nconst buildMathPara = (vNode, attributes, docxDocumentInstanc) => {\n  const mathFragment = fragment({\n    namespaceAlias: { m: namespaces.m },\n  })\n    .ele('@m', 'oMathPara');\n\n  const math = buildMath(vNode, attributes, docxDocumentInstanc);\n\n  mathFragment.import(math);\n\n\n  mathFragment.up();\n  return mathFragment;\n};\n\nconst buildParagraph = (vNode, attributes, docxDocumentInstance) => {\n  const paragraphFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'p');\n  const modifiedAttributes = { ...attributes };\n  if (isVNode(vNode) && vNode.properties && vNode.properties.style) {\n    if (\n      vNode.properties.style.color &&\n      !['transparent', 'auto'].includes(vNode.properties.style.color)\n    ) {\n      modifiedAttributes.color = fixupColorCode(vNode.properties.style.color);\n    }\n    if (\n      vNode.properties.style['background-color'] &&\n      !['transparent', 'auto'].includes(vNode.properties.style['background-color'])\n    ) {\n      modifiedAttributes.backgroundColor = fixupColorCode(\n        vNode.properties.style['background-color']\n      );\n    }\n    if (\n      vNode.properties.style['vertical-align'] &&\n      ['top', 'middle', 'bottom'].includes(vNode.properties.style['vertical-align'])\n    ) {\n      modifiedAttributes.verticalAlign = vNode.properties.style['vertical-align'];\n    }\n    if (\n      vNode.properties.style['text-align'] &&\n      ['left', 'right', 'center', 'justify'].includes(vNode.properties.style['text-align'])\n    ) {\n      modifiedAttributes.textAlign = vNode.properties.style['text-align'];\n    }\n    // FIXME: remove bold check when other font weights are handled.\n    if (vNode.properties.style['font-weight'] && vNode.properties.style['font-weight'] === 'bold') {\n      modifiedAttributes.strong = vNode.properties.style['font-weight'];\n    }\n    if (vNode.properties.style['font-size']) {\n      modifiedAttributes.fontSize = fixupFontSize(vNode.properties.style['font-size']);\n    }\n    if (vNode.properties.style['line-height']) {\n      modifiedAttributes.lineHeight = fixupLineHeight(\n        vNode.properties.style['line-height'],\n        vNode.properties.style['font-size']\n          ? fixupFontSize(vNode.properties.style['font-size'])\n          : null\n      );\n    }\n    if (vNode.properties.style.display) {\n      modifiedAttributes.display = vNode.properties.style.display;\n    }\n  }\n  const paragraphPropertiesFragment = buildParagraphProperties(modifiedAttributes);\n  paragraphFragment.import(paragraphPropertiesFragment);\n  if (isVNode(vNode) && vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    if (\n      [\n        'span',\n        'strong',\n        'b',\n        'em',\n        'i',\n        'u',\n        'ins',\n        'strike',\n        'del',\n        's',\n        'sub',\n        'sup',\n        'mark',\n      ].includes(vNode.tagName)\n    ) {\n      const runOrHyperlinkFragments = buildRunOrHyperLink(\n        vNode,\n        modifiedAttributes,\n        docxDocumentInstance\n      );\n      if (Array.isArray(runOrHyperlinkFragments)) {\n        for (\n          let iteratorIndex = 0;\n          iteratorIndex < runOrHyperlinkFragments.length;\n          iteratorIndex++\n        ) {\n          const runOrHyperlinkFragment = runOrHyperlinkFragments[iteratorIndex];\n\n          paragraphFragment.import(runOrHyperlinkFragment);\n        }\n      } else {\n        paragraphFragment.import(runOrHyperlinkFragments);\n      }\n    } else {\n      for (let index = 0; index < vNode.children.length; index++) {\n        const childVNode = vNode.children[index];\n        const runOrHyperlinkFragments = buildRunOrHyperLink(\n          childVNode,\n          modifiedAttributes,\n          docxDocumentInstance\n        );\n        if (Array.isArray(runOrHyperlinkFragments)) {\n          for (\n            let iteratorIndex = 0;\n            iteratorIndex < runOrHyperlinkFragments.length;\n            iteratorIndex++\n          ) {\n            const runOrHyperlinkFragment = runOrHyperlinkFragments[iteratorIndex];\n\n            paragraphFragment.import(runOrHyperlinkFragment);\n          }\n        } else {\n          paragraphFragment.import(runOrHyperlinkFragments);\n        }\n      }\n    }\n  } else {\n    // In case paragraphs has to be rendered where vText is present. Eg. table-cell\n    // Or in case the vNode is something like img\n    if (isVNode(vNode) && vNode.tagName === 'img') {\n      computeImageDimensions(vNode, modifiedAttributes);\n    }\n    const runFragments = buildRunOrRuns(vNode, modifiedAttributes);\n    if (Array.isArray(runFragments)) {\n      for (let index = 0; index < runFragments.length; index++) {\n        const runFragment = runFragments[index];\n\n        paragraphFragment.import(runFragment);\n      }\n    } else {\n      paragraphFragment.import(runFragments);\n    }\n  }\n  paragraphFragment.up();\n\n  return paragraphFragment;\n};\n\nconst buildGridSpanFragment = (spanValue) => {\n  const gridSpanFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'gridSpan')\n    .att('@w', 'val', spanValue)\n    .up();\n\n  return gridSpanFragment;\n};\n\nconst buildTableCellSpacing = (cellSpacing = 0) => {\n  const tableCellSpacingFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'tblCellSpacing')\n    .att('@w', 'w', cellSpacing)\n    .att('@w', 'type', 'dxa')\n    .up();\n\n  return tableCellSpacingFragment;\n};\n\nconst buildTableCellBorders = (tableCellBorder) => {\n  const tableCellBordersFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tcBorders');\n\n  const { color, stroke, ...borders } = tableCellBorder;\n  Object.keys(borders).forEach((border) => {\n    if (tableCellBorder[border]) {\n      const borderFragment = buildBorder(border, tableCellBorder[border], 0, color, stroke);\n      tableCellBordersFragment.import(borderFragment);\n    }\n  });\n\n  tableCellBordersFragment.up();\n\n  return tableCellBordersFragment;\n};\n\nconst buildTableCellProperties = (attributes) => {\n  const tableCellPropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tcPr');\n  if (attributes && attributes.constructor === Object) {\n    Object.keys(attributes).forEach((key) => {\n      // eslint-disable-next-line default-case\n      switch (key) {\n        case 'backgroundColor':\n          const shadingFragment = buildShading(attributes[key]);\n          tableCellPropertiesFragment.import(shadingFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.backgroundColor;\n          break;\n        case 'verticalAlign':\n          const verticalAlignmentFragment = buildVerticalAlignment(attributes[key]);\n          tableCellPropertiesFragment.import(verticalAlignmentFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.verticalAlign;\n          break;\n        case 'colSpan':\n          const gridSpanFragment = buildGridSpanFragment(attributes[key]);\n          tableCellPropertiesFragment.import(gridSpanFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.colSpan;\n          break;\n        case 'tableCellBorder':\n          const tableCellBorderFragment = buildTableCellBorders(attributes[key]);\n          tableCellPropertiesFragment.import(tableCellBorderFragment);\n\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.tableCellBorder;\n          break;\n      }\n    });\n  }\n  tableCellPropertiesFragment.up();\n\n  return tableCellPropertiesFragment;\n};\n\nconst fixupTableCellBorder = (vNode, attributes) => {\n  if (Object.prototype.hasOwnProperty.call(vNode.properties.style, 'border')) {\n    if (vNode.properties.style.border === 'none' || vNode.properties.style.border === 0) {\n      attributes.tableCellBorder = {};\n    } else {\n      // eslint-disable-next-line no-use-before-define\n      const [borderSize, borderStroke, borderColor] = cssBorderParser(\n        vNode.properties.style.border\n      );\n\n      attributes.tableCellBorder = {\n        top: borderSize,\n        left: borderSize,\n        bottom: borderSize,\n        right: borderSize,\n        color: borderColor,\n        stroke: borderStroke,\n      };\n    }\n  }\n  if (vNode.properties.style['border-top'] && vNode.properties.style['border-top'] === '0') {\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      top: 0,\n    };\n  } else if (vNode.properties.style['border-top'] && vNode.properties.style['border-top'] !== '0') {\n    // eslint-disable-next-line no-use-before-define\n    const [borderSize, borderStroke, borderColor] = cssBorderParser(\n      vNode.properties.style['border-top']\n    );\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      top: borderSize,\n      color: borderColor,\n      stroke: borderStroke,\n    };\n  }\n  if (vNode.properties.style['border-left'] && vNode.properties.style['border-left'] === '0') {\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      left: 0,\n    };\n  } else if (\n    vNode.properties.style['border-left'] &&\n    vNode.properties.style['border-left'] !== '0'\n  ) {\n    // eslint-disable-next-line no-use-before-define\n    const [borderSize, borderStroke, borderColor] = cssBorderParser(\n      vNode.properties.style['border-left']\n    );\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      left: borderSize,\n      color: borderColor,\n      stroke: borderStroke,\n    };\n  }\n  if (vNode.properties.style['border-bottom'] && vNode.properties.style['border-bottom'] === '0') {\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      bottom: 0,\n    };\n  } else if (\n    vNode.properties.style['border-bottom'] &&\n    vNode.properties.style['border-bottom'] !== '0'\n  ) {\n    // eslint-disable-next-line no-use-before-define\n    const [borderSize, borderStroke, borderColor] = cssBorderParser(\n      vNode.properties.style['border-bottom']\n    );\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      bottom: borderSize,\n      color: borderColor,\n      stroke: borderStroke,\n    };\n  }\n  if (vNode.properties.style['border-right'] && vNode.properties.style['border-right'] === '0') {\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      right: 0,\n    };\n  } else if (\n    vNode.properties.style['border-right'] &&\n    vNode.properties.style['border-right'] !== '0'\n  ) {\n    // eslint-disable-next-line no-use-before-define\n    const [borderSize, borderStroke, borderColor] = cssBorderParser(\n      vNode.properties.style['border-right']\n    );\n    attributes.tableCellBorder = {\n      ...attributes.tableCellBorder,\n      right: borderSize,\n      color: borderColor,\n      stroke: borderStroke,\n    };\n  }\n};\n\nconst buildTableCell = (vNode, attributes, docxDocumentInstance) => {\n  const tableCellFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tc');\n  const modifiedAttributes = { ...attributes };\n  if (isVNode(vNode) && vNode.properties) {\n    if (\n      vNode.properties.colSpan ||\n      (vNode.properties.style && vNode.properties.style['column-span'])\n    ) {\n      modifiedAttributes.colSpan =\n        vNode.properties.colSpan ||\n        (vNode.properties.style && vNode.properties.style['column-span']);\n    }\n    if (vNode.properties.style) {\n      if (\n        vNode.properties.style.color &&\n        !['transparent', 'auto'].includes(vNode.properties.style.color)\n      ) {\n        modifiedAttributes.color = fixupColorCode(vNode.properties.style.color);\n      }\n      if (\n        vNode.properties.style['background-color'] &&\n        !['transparent', 'auto'].includes(vNode.properties.style['background-color'])\n      ) {\n        modifiedAttributes.backgroundColor = fixupColorCode(\n          vNode.properties.style['background-color']\n        );\n      }\n      if (\n        vNode.properties.style['vertical-align'] &&\n        ['top', 'middle', 'bottom'].includes(vNode.properties.style['vertical-align'])\n      ) {\n        modifiedAttributes.verticalAlign = vNode.properties.style['vertical-align'];\n      }\n    }\n    if (vNode.properties.style) {\n      fixupTableCellBorder(vNode, modifiedAttributes);\n    }\n  }\n  const tableCellPropertiesFragment = buildTableCellProperties(modifiedAttributes);\n  tableCellFragment.import(tableCellPropertiesFragment);\n  if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    for (let index = 0; index < vNode.children.length; index++) {\n      const childVNode = vNode.children[index];\n      if (isVNode(childVNode) && childVNode.tagName === 'img') {\n        const imageFragment = buildImage(\n          docxDocumentInstance,\n          childVNode,\n          modifiedAttributes.maximumWidth\n        );\n        if (imageFragment) {\n          tableCellFragment.import(imageFragment);\n        }\n      } else if (isVNode(childVNode) && childVNode.tagName === 'figure') {\n        if (\n          childVNode.children &&\n          Array.isArray(childVNode.children) &&\n          childVNode.children.length\n        ) {\n          // eslint-disable-next-line no-plusplus\n          for (let iteratorIndex = 0; iteratorIndex < childVNode.children.length; iteratorIndex++) {\n            const grandChildVNode = childVNode.children[iteratorIndex];\n            if (grandChildVNode.tagName === 'img') {\n              const imageFragment = buildImage(\n                docxDocumentInstance,\n                grandChildVNode,\n                modifiedAttributes.maximumWidth\n              );\n              if (imageFragment) {\n                tableCellFragment.import(imageFragment);\n              }\n            }\n          }\n        }\n      } else {\n        const paragraphFragment = buildParagraph(childVNode, modifiedAttributes);\n        tableCellFragment.import(paragraphFragment);\n      }\n    }\n  } else {\n    // TODO: Figure out why building with buildParagraph() isn't working\n    const paragraphFragment = fragment({\n      namespaceAlias: { w: namespaces.w },\n    })\n      .ele('@w', 'p')\n      .up();\n    tableCellFragment.import(paragraphFragment);\n  }\n  tableCellFragment.up();\n\n  return tableCellFragment;\n};\n\nconst buildTableRowProperties = (attributes) => {\n  const tableRowPropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'trPr');\n  if (attributes && attributes.constructor === Object) {\n    Object.keys(attributes).forEach((key) => {\n      // eslint-disable-next-line default-case\n      switch (key) {\n        case 'tableRowHeight':\n          const tableRowHeightFragment = buildTableRowHeight(attributes[key]);\n          tableRowPropertiesFragment.import(tableRowHeightFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.tableRowHeight;\n          break;\n        case 'rowCantSplit':\n          if (attributes.rowCantSplit) {\n            const cantSplitFragment = fragment({\n              namespaceAlias: { w: namespaces.w },\n            })\n              .ele('@w', 'cantSplit')\n              .up();\n            tableRowPropertiesFragment.import(cantSplitFragment);\n            // Delete used property\n            // eslint-disable-next-line no-param-reassign\n            delete attributes.rowCantSplit;\n          }\n          break;\n      }\n    });\n  }\n  tableRowPropertiesFragment.up();\n  return tableRowPropertiesFragment;\n};\n\nconst buildTableRow = (vNode, attributes, docxDocumentInstance) => {\n  const tableRowFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tr');\n  const modifiedAttributes = { ...attributes };\n  if (isVNode(vNode) && vNode.properties) {\n    // FIXME: find a better way to get row height from cell style\n    if (\n      (vNode.properties.style && vNode.properties.style.height) ||\n      (vNode.children[0] &&\n        isVNode(vNode.children[0]) &&\n        vNode.children[0].properties.style &&\n        vNode.children[0].properties.style.height)\n    ) {\n      modifiedAttributes.tableRowHeight = fixupRowHeight(\n        (vNode.properties.style && vNode.properties.style.height) ||\n          (vNode.children[0] &&\n          isVNode(vNode.children[0]) &&\n          vNode.children[0].properties.style &&\n          vNode.children[0].properties.style.height\n            ? vNode.children[0].properties.style.height\n            : undefined)\n      );\n    }\n    if (vNode.properties.style) {\n      fixupTableCellBorder(vNode, modifiedAttributes);\n    }\n  }\n  const tableRowPropertiesFragment = buildTableRowProperties(modifiedAttributes);\n  tableRowFragment.import(tableRowPropertiesFragment);\n  if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    const tableColumns = vNode.children.filter((childVNode) =>\n      ['td', 'th'].includes(childVNode.tagName)\n    );\n    const columnWidth = docxDocumentInstance.availableDocumentSpace / tableColumns.length;\n\n    for (let index = 0; index < vNode.children.length; index++) {\n      const childVNode = vNode.children[index];\n      if (['td', 'th'].includes(childVNode.tagName)) {\n        const tableCellFragment = buildTableCell(\n          childVNode,\n          { ...modifiedAttributes, maximumWidth: columnWidth },\n          docxDocumentInstance\n        );\n        tableRowFragment.import(tableCellFragment);\n      }\n    }\n  }\n  tableRowFragment.up();\n\n  return tableRowFragment;\n};\n\nconst buildTableGridCol = (gridWidth) => {\n  const tableGridColFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'gridCol')\n    .att('@w', 'w', String(gridWidth));\n\n  return tableGridColFragment;\n};\n\nconst buildTableGrid = (vNode, attributes) => {\n  const tableGridFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tblGrid');\n  if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    const gridColumns = vNode.children.filter((childVNode) => childVNode.tagName === 'col');\n    const gridWidth = attributes.maximumWidth / gridColumns.length;\n\n    for (let index = 0; index < gridColumns.length; index++) {\n      const tableGridColFragment = buildTableGridCol(gridWidth);\n      tableGridFragment.import(tableGridColFragment);\n    }\n  }\n  tableGridFragment.up();\n\n  return tableGridFragment;\n};\n\nconst buildTableBorders = (tableBorder) => {\n  const tableBordersFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tblBorders');\n\n  const { color, stroke, ...borders } = tableBorder;\n\n  Object.keys(borders).forEach((border) => {\n    if (borders[border]) {\n      const borderFragment = buildBorder(border, borders[border], 0, color, stroke);\n      tableBordersFragment.import(borderFragment);\n    }\n  });\n\n  tableBordersFragment.up();\n\n  return tableBordersFragment;\n};\n\nconst buildTableWidth = (tableWidth) => {\n  const tableWidthFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', 'tblW')\n    .att('@w', 'type', 'dxa')\n    .att('@w', 'w', String(tableWidth))\n    .up();\n\n  return tableWidthFragment;\n};\n\nconst buildCellMargin = (side, margin) => {\n  const marginFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  })\n    .ele('@w', side)\n    .att('@w', 'type', 'dxa')\n    .att('@w', 'w', String(margin))\n    .up();\n\n  return marginFragment;\n};\n\nconst buildTableCellMargins = (margin) => {\n  const tableCellMarFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tblCellMar');\n\n  ['top', 'bottom'].forEach((side) => {\n    const marginFragment = buildCellMargin(side, margin / 2);\n    tableCellMarFragment.import(marginFragment);\n  });\n  ['left', 'right'].forEach((side) => {\n    const marginFragment = buildCellMargin(side, margin);\n    tableCellMarFragment.import(marginFragment);\n  });\n\n  return tableCellMarFragment;\n};\n\nconst buildTableProperties = (attributes) => {\n  const tablePropertiesFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tblPr');\n\n  if (attributes && attributes.constructor === Object) {\n    Object.keys(attributes).forEach((key) => {\n      // eslint-disable-next-line default-case\n      switch (key) {\n        case 'tableBorder':\n          const tableBordersFragment = buildTableBorders(attributes[key]);\n          tablePropertiesFragment.import(tableBordersFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.tableBorder;\n          break;\n        case 'tableCellSpacing':\n          const tableCellSpacingFragment = buildTableCellSpacing(attributes[key]);\n          tablePropertiesFragment.import(tableCellSpacingFragment);\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.tableCellSpacing;\n          break;\n        case 'width':\n          if (attributes[key]) {\n            const tableWidthFragment = buildTableWidth(attributes[key]);\n            tablePropertiesFragment.import(tableWidthFragment);\n          }\n          // Delete used property\n          // eslint-disable-next-line no-param-reassign\n          delete attributes.width;\n          break;\n      }\n    });\n  }\n  const tableCellMarginFragment = buildTableCellMargins(160);\n  tablePropertiesFragment.import(tableCellMarginFragment);\n\n  // by default, all tables are center aligned.\n  const alignmentFragment = buildHorizontalAlignment('center');\n  tablePropertiesFragment.import(alignmentFragment);\n\n  tablePropertiesFragment.up();\n\n  return tablePropertiesFragment;\n};\n\nconst cssBorderParser = (borderString) => {\n  let [size, stroke, color] = borderString.split(' ');\n\n  if (pointRegex.test(size)) {\n    const matchedParts = size.match(pointRegex);\n    // convert point to eighth of a point\n    size = pointToEIP(matchedParts[1]);\n  } else if (pixelRegex.test(size)) {\n    const matchedParts = size.match(pixelRegex);\n    // convert pixels to eighth of a point\n    size = pixelToEIP(matchedParts[1]);\n  }\n  stroke = stroke && ['dashed', 'dotted', 'double'].includes(stroke) ? stroke : 'single';\n\n  color = color && fixupColorCode(color).toUpperCase();\n\n  return [size, stroke, color];\n};\n\nconst buildTable = (vNode, attributes, docxDocumentInstance) => {\n  const tableFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'tbl');\n  const modifiedAttributes = { ...attributes };\n  if (isVNode(vNode) && vNode.properties) {\n    const tableAttributes = vNode.properties.attributes || {};\n    const tableStyles = vNode.properties.style || {};\n    const tableBorders = {};\n    const tableCellBorders = {};\n    let [borderSize, borderStrike, borderColor] = [2, 'single', '000000'];\n\n    // eslint-disable-next-line no-restricted-globals\n    if (!isNaN(tableAttributes.border)) {\n      borderSize = parseInt(tableAttributes.border, 10);\n    }\n\n    // css style overrides table border properties\n    if (tableStyles.border) {\n      const [cssSize, cssStroke, cssColor] = cssBorderParser(tableStyles.border);\n      borderSize = cssSize || borderSize;\n      borderColor = cssColor || borderColor;\n      borderStrike = cssStroke || borderStrike;\n    }\n\n    tableBorders.top = borderSize;\n    tableBorders.bottom = borderSize;\n    tableBorders.left = borderSize;\n    tableBorders.right = borderSize;\n    tableBorders.stroke = borderStrike;\n    tableBorders.color = borderColor;\n\n    if (tableStyles['border-collapse'] === 'collapse') {\n      tableBorders.insideV = borderSize;\n      tableBorders.insideH = borderSize;\n    } else {\n      tableBorders.insideV = 0;\n      tableBorders.insideH = 0;\n      tableCellBorders.top = 1;\n      tableCellBorders.bottom = 1;\n      tableCellBorders.left = 1;\n      tableCellBorders.right = 1;\n    }\n\n    modifiedAttributes.tableBorder = tableBorders;\n    modifiedAttributes.tableCellSpacing = 0;\n\n    if (Object.keys(tableCellBorders).length) {\n      modifiedAttributes.tableCellBorder = tableCellBorders;\n    }\n\n    let minimumWidth;\n    let maximumWidth;\n    let width;\n    // Calculate minimum width of table\n    if (pixelRegex.test(tableStyles['min-width'])) {\n      minimumWidth = pixelToTWIP(tableStyles['min-width'].match(pixelRegex)[1]);\n    } else if (percentageRegex.test(tableStyles['min-width'])) {\n      const percentageValue = tableStyles['min-width'].match(percentageRegex)[1];\n      minimumWidth = Math.round((percentageValue / 100) * attributes.maximumWidth);\n    }\n\n    // Calculate maximum width of table\n    if (pixelRegex.test(tableStyles['max-width'])) {\n      pixelRegex.lastIndex = 0;\n      maximumWidth = pixelToTWIP(tableStyles['max-width'].match(pixelRegex)[1]);\n    } else if (percentageRegex.test(tableStyles['max-width'])) {\n      percentageRegex.lastIndex = 0;\n      const percentageValue = tableStyles['max-width'].match(percentageRegex)[1];\n      maximumWidth = Math.round((percentageValue / 100) * attributes.maximumWidth);\n    }\n\n    // Calculate specified width of table\n    if (pixelRegex.test(tableStyles.width)) {\n      pixelRegex.lastIndex = 0;\n      width = pixelToTWIP(tableStyles.width.match(pixelRegex)[1]);\n    } else if (percentageRegex.test(tableStyles.width)) {\n      percentageRegex.lastIndex = 0;\n      const percentageValue = tableStyles.width.match(percentageRegex)[1];\n      width = Math.round((percentageValue / 100) * attributes.maximumWidth);\n    }\n\n    // If width isn't supplied, we should have min-width as the width.\n    if (width) {\n      modifiedAttributes.width = width;\n      if (maximumWidth) {\n        modifiedAttributes.width = Math.min(modifiedAttributes.width, maximumWidth);\n      }\n      if (minimumWidth) {\n        modifiedAttributes.width = Math.max(modifiedAttributes.width, minimumWidth);\n      }\n    } else if (minimumWidth) {\n      modifiedAttributes.width = minimumWidth;\n    }\n    if (modifiedAttributes.width) {\n      modifiedAttributes.width = Math.min(modifiedAttributes.width, attributes.maximumWidth);\n    }\n  }\n  const tablePropertiesFragment = buildTableProperties(modifiedAttributes);\n  tableFragment.import(tablePropertiesFragment);\n  if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    for (let index = 0; index < vNode.children.length; index++) {\n      const childVNode = vNode.children[index];\n      if (childVNode.tagName === 'colgroup') {\n        const tableGridFragment = buildTableGrid(childVNode, modifiedAttributes);\n        tableFragment.import(tableGridFragment);\n      } else if (childVNode.tagName === 'thead') {\n        for (let iteratorIndex = 0; iteratorIndex < childVNode.children.length; iteratorIndex++) {\n          const grandChildVNode = childVNode.children[iteratorIndex];\n          if (grandChildVNode.tagName === 'tr') {\n            const tableRowFragment = buildTableRow(\n              grandChildVNode,\n              modifiedAttributes,\n              docxDocumentInstance\n            );\n            tableFragment.import(tableRowFragment);\n          }\n        }\n      } else if (childVNode.tagName === 'tbody') {\n        for (let iteratorIndex = 0; iteratorIndex < childVNode.children.length; iteratorIndex++) {\n          const grandChildVNode = childVNode.children[iteratorIndex];\n          if (grandChildVNode.tagName === 'tr') {\n            const tableRowFragment = buildTableRow(\n              grandChildVNode,\n              modifiedAttributes,\n              docxDocumentInstance\n            );\n            tableFragment.import(tableRowFragment);\n          }\n        }\n      } else if (childVNode.tagName === 'tr') {\n        const tableRowFragment = buildTableRow(\n          childVNode,\n          modifiedAttributes,\n          docxDocumentInstance\n        );\n        tableFragment.import(tableRowFragment);\n      }\n    }\n  }\n  tableFragment.up();\n\n  return tableFragment;\n};\n\nconst buildPresetGeometry = () => {\n  const presetGeometryFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'prstGeom')\n    .att('prst', 'rect')\n    .up();\n\n  return presetGeometryFragment;\n};\n\nconst buildExtents = ({ width, height }) => {\n  const extentsFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'ext')\n    .att('cx', width)\n    .att('cy', height)\n    .up();\n\n  return extentsFragment;\n};\n\nconst buildOffset = () => {\n  const offsetFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'off')\n    .att('x', '0')\n    .att('y', '0')\n    .up();\n\n  return offsetFragment;\n};\n\nconst buildGraphicFrameTransform = (attributes) => {\n  const graphicFrameTransformFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  }).ele('@a', 'xfrm');\n\n  const offsetFragment = buildOffset();\n  graphicFrameTransformFragment.import(offsetFragment);\n  const extentsFragment = buildExtents(attributes);\n  graphicFrameTransformFragment.import(extentsFragment);\n\n  graphicFrameTransformFragment.up();\n\n  return graphicFrameTransformFragment;\n};\n\nconst buildShapeProperties = (attributes) => {\n  const shapeProperties = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'spPr');\n\n  const graphicFrameTransformFragment = buildGraphicFrameTransform(attributes);\n  shapeProperties.import(graphicFrameTransformFragment);\n  const presetGeometryFragment = buildPresetGeometry();\n  shapeProperties.import(presetGeometryFragment);\n\n  shapeProperties.up();\n\n  return shapeProperties;\n};\n\nconst buildFillRect = () => {\n  const fillRectFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'fillRect')\n    .up();\n\n  return fillRectFragment;\n};\n\nconst buildStretch = () => {\n  const stretchFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  }).ele('@a', 'stretch');\n\n  const fillRectFragment = buildFillRect();\n  stretchFragment.import(fillRectFragment);\n\n  stretchFragment.up();\n\n  return stretchFragment;\n};\n\nconst buildSrcRectFragment = () => {\n  const srcRectFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'srcRect')\n    .att('b', '0')\n    .att('l', '0')\n    .att('r', '0')\n    .att('t', '0')\n    .up();\n\n  return srcRectFragment;\n};\n\nconst buildBinaryLargeImageOrPicture = (relationshipId) => {\n  const binaryLargeImageOrPictureFragment = fragment({\n    namespaceAlias: { a: namespaces.a, r: namespaces.r },\n  })\n    .ele('@a', 'blip')\n    .att('@r', 'embed', `rId${relationshipId}`)\n    // FIXME: possible values 'email', 'none', 'print', 'hqprint', 'screen'\n    .att('cstate', 'print');\n\n  binaryLargeImageOrPictureFragment.up();\n\n  return binaryLargeImageOrPictureFragment;\n};\n\nconst build_useLocalDpi = ( ) => {\n  const extLstFragment = fragment({\n    namespaceAlias: { a14: namespaces.a14 },\n  })\n    .ele('@a14', 'useLocalDpi')\n    // .att('@a14', 'xmlns', \"http://schemas.microsoft.com/office/drawing/2010/main\")\n    .att('xmlns', \"\")\n    .att('val', \"0\")\n  ;\n\n  extLstFragment.up();\n\n  return extLstFragment;\n};\n\nconst build_svgBlip = (rId_svg) => {\n  const svgBlipFragment = fragment({\n      namespaceAlias: {\n        asvg: namespaces.asvg,\n        r: namespaces.r\n      },\n    })\n      .ele('@asvg', 'svgBlip')\n      // .att('@asvg', 'xmlns', \"http://schemas.microsoft.com/office/drawing/2016/SVG/main\")\n    .att('xmlns', \"\")\n    .att('@r', 'embed', `rId${rId_svg}`)\n  ;\n\n  svgBlipFragment.up();\n\n  return svgBlipFragment;\n};\n\nconst build_ext = (rId_svg = '') => {\n  const extFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'ext')\n    .att('uri', \"\")  ;\n  let childFragment;\n\n  if (!rId_svg) {\n    childFragment = build_useLocalDpi();\n  } else {\n    childFragment = build_svgBlip(rId_svg);\n  }\n  extFragment.import(childFragment);\n\n  extFragment.up();\n  return extFragment;\n};\n\nconst build_extLst = (rId_svg) => {\n  const extLstFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'extLst');\n\n  let extFragment = build_ext();\n  extLstFragment.import(extFragment);\n\n  extFragment = build_ext(rId_svg);\n  extLstFragment.import(extFragment);\n\n  extLstFragment.up();\n  return extLstFragment;\n};\n\nconst buildBinaryLargeImageOrPictureSvg = (relationshipId, relationshipId_png, relationshipId_svg) => {\n  const binaryLargeImageOrPictureFragment = fragment({\n    namespaceAlias: { a: namespaces.a, r: namespaces.r },\n  })\n    .ele('@a', 'blip')\n    .att('@r', 'embed', `rId${relationshipId}`)\n    // FIXME: possible values 'email', 'none', 'print', 'hqprint', 'screen'\n    .att('cstate', 'print');\n\n  //\n  const build_extLstFragment = build_extLst(relationshipId_svg);\n  binaryLargeImageOrPictureFragment.import(build_extLstFragment);\n\n  binaryLargeImageOrPictureFragment.up();\n\n  return binaryLargeImageOrPictureFragment;\n};\n\n//buildBinaryLargeImageOrPictureSvgFill\nconst buildBinaryLargeImageOrPictureSvgFill = (relationshipId, relationshipId_png, relationshipId_svg) => {\n  const binaryLargeImageOrPictureFillFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'blipFill');\n\n  const binaryLargeImageOrPictureFragment = buildBinaryLargeImageOrPictureSvg(relationshipId, relationshipId_png, relationshipId_svg);\n  binaryLargeImageOrPictureFillFragment.import(binaryLargeImageOrPictureFragment);\n\n\n  const srcRectFragment = buildSrcRectFragment();\n  binaryLargeImageOrPictureFillFragment.import(srcRectFragment);\n  const stretchFragment = buildStretch();\n  binaryLargeImageOrPictureFillFragment.import(stretchFragment);\n\n  binaryLargeImageOrPictureFillFragment.up();\n\n  return binaryLargeImageOrPictureFillFragment;\n};\n\nconst buildBinaryLargeImageOrPictureFill = (relationshipId) => {\n  const binaryLargeImageOrPictureFillFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'blipFill');\n  const binaryLargeImageOrPictureFragment = buildBinaryLargeImageOrPicture(relationshipId);\n  binaryLargeImageOrPictureFillFragment.import(binaryLargeImageOrPictureFragment);\n  const srcRectFragment = buildSrcRectFragment();\n  binaryLargeImageOrPictureFillFragment.import(srcRectFragment);\n  const stretchFragment = buildStretch();\n  binaryLargeImageOrPictureFillFragment.import(stretchFragment);\n\n  binaryLargeImageOrPictureFillFragment.up();\n\n  return binaryLargeImageOrPictureFillFragment;\n};\n\nconst buildNonVisualPictureDrawingProperties = () => {\n  const nonVisualPictureDrawingPropertiesFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'cNvPicPr');\n\n  nonVisualPictureDrawingPropertiesFragment.up();\n\n  return nonVisualPictureDrawingPropertiesFragment;\n};\n\nconst buildNonVisualDrawingProperties = (\n  pictureId,\n  pictureNameWithExtension,\n  pictureDescription = ''\n) => {\n  const nonVisualDrawingPropertiesFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  })\n    .ele('@pic', 'cNvPr')\n    .att('id', pictureId)\n    .att('name', pictureNameWithExtension)\n    .att('descr', pictureDescription);\n\n  nonVisualDrawingPropertiesFragment.up();\n\n  return nonVisualDrawingPropertiesFragment;\n};\n\nconst buildNonVisualPictureProperties = (\n  pictureId,\n  pictureNameWithExtension,\n  pictureDescription\n) => {\n  const nonVisualPicturePropertiesFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'nvPicPr');\n  // TODO: Handle picture attributes\n  const nonVisualDrawingPropertiesFragment = buildNonVisualDrawingProperties(\n    pictureId,\n    pictureNameWithExtension,\n    pictureDescription\n  );\n  nonVisualPicturePropertiesFragment.import(nonVisualDrawingPropertiesFragment);\n  const nonVisualPictureDrawingPropertiesFragment = buildNonVisualPictureDrawingProperties();\n  nonVisualPicturePropertiesFragment.import(nonVisualPictureDrawingPropertiesFragment);\n  nonVisualPicturePropertiesFragment.up();\n\n  return nonVisualPicturePropertiesFragment;\n};\n\n//buildPictureSvg\nconst buildPictureSvg = ({\n  id,\n  fileNameWithExtension,\n  description,\n  relationshipId,\n  relationshipId_png,\n  relationshipId_svg,\n  width,\n  height,\n                      }) => {\n  const pictureFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'pic');\n  const nonVisualPicturePropertiesFragment = buildNonVisualPictureProperties(\n    id,\n    fileNameWithExtension,\n    description\n  );\n  pictureFragment.import(nonVisualPicturePropertiesFragment);\n  const binaryLargeImageOrPictureFill = buildBinaryLargeImageOrPictureSvgFill(relationshipId, relationshipId_png, relationshipId_svg);\n  pictureFragment.import(binaryLargeImageOrPictureFill);\n  const shapeProperties = buildShapeProperties({ width, height });\n  pictureFragment.import(shapeProperties);\n  pictureFragment.up();\n\n  return pictureFragment;\n};\n\nconst buildPicture = ({\n  id,\n  fileNameWithExtension,\n  description,\n  relationshipId,\n  width,\n  height,\n}) => {\n  const pictureFragment = fragment({\n    namespaceAlias: { pic: namespaces.pic },\n  }).ele('@pic', 'pic');\n  const nonVisualPicturePropertiesFragment = buildNonVisualPictureProperties(\n    id,\n    fileNameWithExtension,\n    description\n  );\n  pictureFragment.import(nonVisualPicturePropertiesFragment);\n  const binaryLargeImageOrPictureFill = buildBinaryLargeImageOrPictureFill(relationshipId);\n  pictureFragment.import(binaryLargeImageOrPictureFill);\n  const shapeProperties = buildShapeProperties({ width, height });\n  pictureFragment.import(shapeProperties);\n  pictureFragment.up();\n\n  return pictureFragment;\n};\n\nconst buildGraphicData = (graphicType, attributes) => {\n  const graphicDataFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  })\n    .ele('@a', 'graphicData')\n    .att('uri', 'http://schemas.openxmlformats.org/drawingml/2006/picture');\n  if (graphicType === 'picture') {\n    const pictureFragment = buildPicture(attributes);\n    graphicDataFragment.import(pictureFragment);\n  }\n  if (graphicType === 'picture_svg') {\n    const pictureFragment = buildPictureSvg(attributes);\n    graphicDataFragment.import(pictureFragment);\n  }\n  graphicDataFragment.up();\n\n  return graphicDataFragment;\n};\n\nconst buildGraphic = (graphicType, attributes) => {\n  const graphicFragment = fragment({\n    namespaceAlias: { a: namespaces.a },\n  }).ele('@a', 'graphic');\n  // TODO: Handle drawing type\n  const graphicDataFragment = buildGraphicData(graphicType, attributes);\n  graphicFragment.import(graphicDataFragment);\n  graphicFragment.up();\n\n  return graphicFragment;\n};\n\nconst buildDrawingObjectNonVisualProperties = (pictureId, pictureName) => {\n  const drawingObjectNonVisualPropertiesFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'docPr')\n    .att('id', pictureId)\n    .att('name', pictureName)\n    .up();\n\n  return drawingObjectNonVisualPropertiesFragment;\n};\n\nconst buildWrapSquare = () => {\n  const wrapSquareFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'wrapSquare')\n    .att('wrapText', 'bothSides')\n    .att('distB', '228600')\n    .att('distT', '228600')\n    .att('distL', '228600')\n    .att('distR', '228600')\n    .up();\n\n  return wrapSquareFragment;\n};\n\n// eslint-disable-next-line no-unused-vars\nconst buildWrapNone = () => {\n  const wrapNoneFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'wrapNone')\n    .up();\n\n  return wrapNoneFragment;\n};\n\nconst buildEffectExtentFragment = () => {\n  const effectExtentFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'effectExtent')\n    .att('b', '0')\n    .att('l', '0')\n    .att('r', '0')\n    .att('t', '0')\n    .up();\n\n  return effectExtentFragment;\n};\n\nconst buildExtent = ({ width, height }) => {\n  const extentFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'extent')\n    .att('cx', width)\n    .att('cy', height)\n    .up();\n\n  return extentFragment;\n};\n\nconst buildPositionV = () => {\n  const positionVFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'positionV')\n    .att('relativeFrom', 'paragraph')\n    .ele('@wp', 'posOffset')\n    .txt('19050')\n    .up()\n    .up();\n\n  return positionVFragment;\n};\n\nconst buildPositionH = () => {\n  const positionHFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'positionH')\n    .att('relativeFrom', 'column')\n    .ele('@wp', 'posOffset')\n    .txt('19050')\n    .up()\n    .up();\n\n  return positionHFragment;\n};\n\nconst buildSimplePos = () => {\n  const simplePosFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'simplePos')\n    .att('x', '0')\n    .att('y', '0')\n    .up();\n\n  return simplePosFragment;\n};\n\nconst buildAnchoredDrawing = (graphicType, attributes) => {\n  const anchoredDrawingFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'anchor')\n    .att('distB', '0')\n    .att('distL', '0')\n    .att('distR', '0')\n    .att('distT', '0')\n    .att('relativeHeight', '0')\n    .att('behindDoc', 'false')\n    .att('locked', 'true')\n    .att('layoutInCell', 'true')\n    .att('allowOverlap', 'false')\n    .att('simplePos', 'false');\n  // Even though simplePos isnt supported by Word 2007 simplePos is required.\n  const simplePosFragment = buildSimplePos();\n  anchoredDrawingFragment.import(simplePosFragment);\n  const positionHFragment = buildPositionH();\n  anchoredDrawingFragment.import(positionHFragment);\n  const positionVFragment = buildPositionV();\n  anchoredDrawingFragment.import(positionVFragment);\n  const extentFragment = buildExtent({ width: attributes.width, height: attributes.height });\n  anchoredDrawingFragment.import(extentFragment);\n  const effectExtentFragment = buildEffectExtentFragment();\n  anchoredDrawingFragment.import(effectExtentFragment);\n  const wrapSquareFragment = buildWrapSquare();\n  anchoredDrawingFragment.import(wrapSquareFragment);\n  const drawingObjectNonVisualPropertiesFragment = buildDrawingObjectNonVisualProperties(\n    attributes.id,\n    attributes.fileNameWithExtension\n  );\n  anchoredDrawingFragment.import(drawingObjectNonVisualPropertiesFragment);\n  const graphicFragment = buildGraphic(graphicType, attributes);\n  anchoredDrawingFragment.import(graphicFragment);\n\n  anchoredDrawingFragment.up();\n\n  return anchoredDrawingFragment;\n};\n\nconst buildInlineDrawing = (graphicType, attributes) => {\n  const inlineDrawingFragment = fragment({\n    namespaceAlias: { wp: namespaces.wp },\n  })\n    .ele('@wp', 'inline')\n    .att('distB', '0')\n    .att('distL', '0')\n    .att('distR', '0')\n    .att('distT', '0');\n\n  const extentFragment = buildExtent({ width: attributes.width, height: attributes.height });\n  inlineDrawingFragment.import(extentFragment);\n  const effectExtentFragment = buildEffectExtentFragment();\n  inlineDrawingFragment.import(effectExtentFragment);\n  const drawingObjectNonVisualPropertiesFragment = buildDrawingObjectNonVisualProperties(\n    attributes.id,\n    attributes.fileNameWithExtension\n  );\n  inlineDrawingFragment.import(drawingObjectNonVisualPropertiesFragment);\n  const graphicFragment = buildGraphic(graphicType, attributes);\n  inlineDrawingFragment.import(graphicFragment);\n\n  inlineDrawingFragment.up();\n\n  return inlineDrawingFragment;\n};\n\nconst buildDrawing = (inlineOrAnchored = false, graphicType, attributes) => {\n  const drawingFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  }).ele('@w', 'drawing');\n  const inlineOrAnchoredDrawingFragment = inlineOrAnchored\n    ? buildInlineDrawing(graphicType, attributes)\n    : buildAnchoredDrawing(graphicType, attributes);\n  drawingFragment.import(inlineOrAnchoredDrawingFragment);\n  drawingFragment.up();\n\n  return drawingFragment;\n};\n\nexport {\n  buildParagraph,\n  buildMathPara,\n  buildTable,\n  buildNumberingInstances,\n  buildLineBreak,\n  buildIndentation,\n  buildTextElement,\n  buildBold,\n  buildItalics,\n  buildUnderline,\n  buildDrawing,\n  fixupLineHeight,\n};\n","/* eslint-disable no-case-declarations */\nimport { fragment } from 'xmlbuilder2';\n\n// FIXME: remove the cyclic dependency\n// eslint-disable-next-line import/no-cycle\nimport * as xmlBuilder from './xml-builder';\nimport namespaces from './namespaces';\nimport { pixelToHIP, defaultHeadingSizesInPixel } from '../utils/unit-conversion';\n\nconst VNode = require('virtual-dom/vnode/vnode');\nconst VText = require('virtual-dom/vnode/vtext');\nconst isVNode = require('virtual-dom/vnode/is-vnode');\nconst isVText = require('virtual-dom/vnode/is-vtext');\nconst escape = require('escape-html');\nconst sizeOf = require('image-size');\nconst { createCanvas, Image, //loadImage\n} = require('canvas');\n\nconst convertHTML = require('html-to-vdom')({\n  VNode,\n  VText,\n});\n\nconst  createMediaFileFromSvg = (base64String, width, height, callback) => {\n  const canvas = createCanvas(200, 200);\n  const context = canvas.getContext('2d')\n\n  canvas.width = width;\n  canvas.height = height;\n\n  const image = new Image();\n  image.onload = function() {\n    context.clearRect ( 0, 0, width, height );\n    context.drawImage(image, 0, 0, width, height);\n    const pngData = canvas.toDataURL('image/' + 'png');\n    callback(pngData);\n  };\n  image.src = \"data:image/svg+xml;base64,\" + base64String;\n};\n\n// eslint-disable-next-line consistent-return\nexport const buildImage = (docxDocumentInstance, vNode, maximumWidth = null) => {\n  let response = null;\n  let responseArr = [];\n  try {\n    // libtidy encodes the image src\n    responseArr = docxDocumentInstance.createMediaFile(decodeURIComponent(vNode.properties.src));\n  } catch (error) {\n    // NOOP\n  }\n\n\n  if (responseArr && responseArr.length) {\n    if (responseArr.length === 1) {\n      response = responseArr[0];\n      docxDocumentInstance.zip\n        .folder('word')\n        .folder('media')\n        .file(response.fileNameWithExtension, Buffer.from(response.fileContent, 'base64'), {\n          createFolders: false,\n        });\n      let documentRelsId = docxDocumentInstance.createDocumentRelationships(\n        docxDocumentInstance.relationshipFilename,\n        'image',\n        `media/${response.fileNameWithExtension}`,\n        'Internal'\n      );\n      const imageBuffer = Buffer.from(response.fileContent, 'base64');\n      const imageProperties = sizeOf(imageBuffer);\n      let imageFragment = xmlBuilder.buildParagraph(\n        vNode,\n        {\n          type: 'picture',\n          inlineOrAnchored: true,\n          relationshipId: documentRelsId,\n          ...response,\n          maximumWidth: maximumWidth || docxDocumentInstance.availableDocumentSpace,\n          originalWidth: imageProperties.width,\n          originalHeight: imageProperties.height,\n        },\n        docxDocumentInstance\n      );\n      return imageFragment;\n    }\n    else {\n      // For svg\n      // const relationshipIds = [];\n\n      let ownerImageProperties;\n      let ownerRelationshipId;\n      let ownerResponse;\n      let relationshipId_png;\n      for (let i = 0; i < responseArr.length; i++) {\n        response = responseArr[i];\n        const imageBuffer = Buffer.from(response.fileContent, 'base64');\n        const imageProperties = sizeOf(imageBuffer);\n\n        if (i === 0) {\n          ownerImageProperties = imageProperties;\n          docxDocumentInstance.zip\n            .folder('word')\n            .folder('media')\n            .file(response.fileNameWithExtension, Buffer.from(response.fileContent, 'base64'), {\n              createFolders: false,\n            });\n        } else {\n          createMediaFileFromSvg(response.fileContent, imageProperties.width, imageProperties.height,\n            (pngData) => {\n              const index = pngData.indexOf('data:image/png;base64,');\n              if ( index >= 0 ) {\n                pngData = pngData.slice(index + 'data:image/png;base64,'.length);\n              }\n              docxDocumentInstance.zip\n                .folder('word')\n                .folder('media')\n                .file(response.fileNameWithExtension, Buffer.from(pngData, 'base64'), {\n                  createFolders: false,\n                });\n            });\n        }\n\n        let documentRelsId = docxDocumentInstance.createDocumentRelationships(\n          docxDocumentInstance.relationshipFilename,\n          'image',\n          `media/${response.fileNameWithExtension}`,\n          'Internal'\n        );\n        if (i === 0) {\n          ownerRelationshipId = documentRelsId;\n          ownerResponse = response;\n        } else {\n          relationshipId_png = documentRelsId;\n        }\n      }\n\n      let imageFragment = xmlBuilder.buildParagraph(\n        vNode,\n        {\n          type: 'picture_svg',\n          inlineOrAnchored: true,\n          relationshipId: relationshipId_png,\n          relationshipId_png: relationshipId_png,\n          relationshipId_svg: ownerRelationshipId,\n          ...ownerResponse,\n          maximumWidth: maximumWidth || docxDocumentInstance.availableDocumentSpace,\n          originalWidth: ownerImageProperties.width,\n          originalHeight: ownerImageProperties.height,\n        },\n        docxDocumentInstance\n      );\n      return imageFragment;\n    }\n  }\n};\n\nexport const buildList = (vNode) => {\n  const listElements = [];\n\n  let vNodeObjects = [{ node: vNode, level: 0, type: vNode.tagName }];\n  while (vNodeObjects.length) {\n    const tempVNodeObject = vNodeObjects.shift();\n    if (\n      isVText(tempVNodeObject.node) ||\n      (isVNode(tempVNodeObject.node) && !['ul', 'ol', 'li'].includes(tempVNodeObject.node.tagName))\n    ) {\n      listElements.push({\n        node: tempVNodeObject.node,\n        level: tempVNodeObject.level,\n        type: tempVNodeObject.type,\n      });\n    }\n\n    if (\n      tempVNodeObject.node.children &&\n      tempVNodeObject.node.children.length &&\n      ['ul', 'ol', 'li'].includes(tempVNodeObject.node.tagName)\n    ) {\n      const tempVNodeObjects = tempVNodeObject.node.children.reduce((accumulator, childVNode) => {\n        if (['ul', 'ol'].includes(childVNode.tagName)) {\n          accumulator.push({\n            node: childVNode,\n            level: tempVNodeObject.level + 1,\n            type: childVNode.tagName,\n          });\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (\n            accumulator.length > 0 &&\n            isVNode(accumulator[accumulator.length - 1].node) &&\n            accumulator[accumulator.length - 1].node.tagName.toLowerCase() === 'p'\n          ) {\n            accumulator[accumulator.length - 1].node.children.push(childVNode);\n          } else {\n            const paragraphVNode = new VNode(\n              'p',\n              null,\n              // eslint-disable-next-line no-nested-ternary\n              isVText(childVNode)\n                ? [childVNode]\n                : // eslint-disable-next-line no-nested-ternary\n                isVNode(childVNode)\n                ? childVNode.tagName.toLowerCase() === 'li'\n                  ? [...childVNode.children]\n                  : [childVNode]\n                : []\n            );\n            accumulator.push({\n              // eslint-disable-next-line prettier/prettier, no-nested-ternary\n              node: isVNode(childVNode)\n                ? // eslint-disable-next-line prettier/prettier, no-nested-ternary\n                  childVNode.tagName.toLowerCase() === 'li'\n                  ? childVNode\n                  : childVNode.tagName.toLowerCase() !== 'p'\n                  ? paragraphVNode\n                  : childVNode\n                : // eslint-disable-next-line prettier/prettier\n                  paragraphVNode,\n              level: tempVNodeObject.level,\n              type: tempVNodeObject.type,\n            });\n          }\n        }\n\n        return accumulator;\n      }, []);\n      vNodeObjects = tempVNodeObjects.concat(vNodeObjects);\n    }\n  }\n\n  return listElements;\n};\n\nfunction findXMLEquivalent(docxDocumentInstance, vNode, xmlFragment) {\n  if (\n    vNode.tagName === 'div' &&\n    (vNode.properties.attributes.class === 'page-break' ||\n      (vNode.properties.style && vNode.properties.style['page-break-after']))\n  ) {\n    const paragraphFragment = fragment({\n      namespaceAlias: { w: namespaces.w },\n    })\n      .ele('@w', 'p')\n      .ele('@w', 'r')\n      .ele('@w', 'br')\n      .att('@w', 'type', 'page')\n      .up()\n      .up()\n      .up();\n\n    xmlFragment.import(paragraphFragment);\n    return;\n  }\n  switch (vNode.tagName) {\n    case 'h1':\n    case 'h2':\n    case 'h3':\n    case 'h4':\n    case 'h5':\n    case 'h6':\n      const fontSize = pixelToHIP(defaultHeadingSizesInPixel[vNode.tagName]);\n      const lineHeight = xmlBuilder.fixupLineHeight(1, fontSize);\n      const headingFragment = xmlBuilder.buildParagraph(vNode, {\n        fontSize,\n        lineHeight: Math.max(lineHeight, 240),\n        strong: 'bold',\n        beforeSpacing: 240,\n      });\n      xmlFragment.import(headingFragment);\n      return;\n    case 'span':\n    case 'strong':\n    case 'b':\n    case 'em':\n    case 'i':\n    case 'u':\n    case 'ins':\n    case 'strike':\n    case 'del':\n    case 's':\n    case 'sub':\n    case 'sup':\n    case 'mark':\n    case 'div':\n    case 'p':\n      const paragraphFragment = xmlBuilder.buildParagraph(vNode, {}, docxDocumentInstance);\n      xmlFragment.import(paragraphFragment);\n      return;\n    case 'math':\n      const mathFragment = fragment({\n        namespaceAlias: { w: namespaces.w },\n      })\n        .ele('@w', 'p');\n\n      const oMathPara = xmlBuilder.buildMathPara(vNode, {}, docxDocumentInstance);\n      mathFragment.import(oMathPara);\n      mathFragment.up();\n\n      xmlFragment.import(mathFragment);\n      return;\n    case 'figure':\n      if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n        // eslint-disable-next-line no-plusplus\n        for (let index = 0; index < vNode.children.length; index++) {\n          const childVNode = vNode.children[index];\n          if (childVNode.tagName === 'table') {\n            const tableFragment = xmlBuilder.buildTable(\n              childVNode,\n              {\n                maximumWidth: docxDocumentInstance.availableDocumentSpace,\n                rowCantSplit: docxDocumentInstance.tableRowCantSplit,\n              },\n              docxDocumentInstance\n            );\n            xmlFragment.import(tableFragment);\n            // Adding empty paragraph for space after table\n            const emptyParagraphFragment = xmlBuilder.buildParagraph(null, {});\n            xmlFragment.import(emptyParagraphFragment);\n          } else if (childVNode.tagName === 'img') {\n            const imageFragment = buildImage(docxDocumentInstance, childVNode);\n            if (imageFragment) {\n              xmlFragment.import(imageFragment);\n            }\n          }\n        }\n      }\n      return;\n    case 'table':\n      const tableFragment = xmlBuilder.buildTable(\n        vNode,\n        {\n          maximumWidth: docxDocumentInstance.availableDocumentSpace,\n          rowCantSplit: docxDocumentInstance.tableRowCantSplit,\n        },\n        docxDocumentInstance\n      );\n      xmlFragment.import(tableFragment);\n      // Adding empty paragraph for space after table\n      const emptyParagraphFragment = xmlBuilder.buildParagraph(null, {});\n      xmlFragment.import(emptyParagraphFragment);\n      return;\n    case 'ol':\n    case 'ul':\n      const listElements = buildList(vNode);\n      const numberingId = docxDocumentInstance.createNumbering(listElements);\n      // eslint-disable-next-line no-plusplus\n      for (let index = 0; index < listElements.length; index++) {\n        const listElement = listElements[index];\n        // eslint-disable-next-line no-shadow\n        const paragraphFragment = xmlBuilder.buildParagraph(\n          listElement.node,\n          {\n            numbering: { levelId: listElement.level, numberingId },\n          },\n          docxDocumentInstance\n        );\n        xmlFragment.import(paragraphFragment);\n      }\n      return;\n    case 'img':\n      const imageFragment = buildImage(docxDocumentInstance, vNode);\n      if (imageFragment) {\n        xmlFragment.import(imageFragment);\n      }\n      return;\n    case 'br':\n      const linebreakFragment = xmlBuilder.buildParagraph(null, {});\n      xmlFragment.import(linebreakFragment);\n      return;\n    default:\n      break;\n  }\n  if (vNode.children && Array.isArray(vNode.children) && vNode.children.length) {\n    // eslint-disable-next-line no-plusplus\n    for (let index = 0; index < vNode.children.length; index++) {\n      const childVNode = vNode.children[index];\n      // eslint-disable-next-line no-use-before-define\n      convertVTreeToXML(docxDocumentInstance, childVNode, xmlFragment);\n    }\n  }\n}\n\n// eslint-disable-next-line consistent-return\nexport function convertVTreeToXML(docxDocumentInstance, vTree, xmlFragment) {\n  if (!vTree) {\n    // eslint-disable-next-line no-useless-return\n    return '';\n  }\n  if (Array.isArray(vTree) && vTree.length) {\n    // eslint-disable-next-line no-plusplus\n    for (let index = 0; index < vTree.length; index++) {\n      const vNode = vTree[index];\n      convertVTreeToXML(docxDocumentInstance, vNode, xmlFragment);\n    }\n  } else if (isVNode(vTree)) {\n    findXMLEquivalent(docxDocumentInstance, vTree, xmlFragment);\n  } else if (isVText(vTree)) {\n    xmlBuilder.buildTextElement(xmlFragment, escape(String(vTree.text)));\n  }\n  return xmlFragment;\n}\n\nfunction renderDocumentFile(docxDocumentInstance) {\n  const vTree = convertHTML(docxDocumentInstance.htmlString);\n\n  const xmlFragment = fragment({\n    namespaceAlias: { w: namespaces.w },\n  });\n\n  const populatedXmlFragment = convertVTreeToXML(docxDocumentInstance, vTree, xmlFragment);\n\n  return populatedXmlFragment;\n}\n\nexport default renderDocumentFile;\n","import { namespaces } from '../helpers';\n\nconst generateCoreXML = (\n  title = '',\n  subject = '',\n  creator = 'html-to-docx',\n  keywords = ['html-to-docx'],\n  description = '',\n  lastModifiedBy = 'html-to-docx',\n  revision = 1,\n  createdAt = new Date(),\n  modifiedAt = new Date()\n) => {\n  return `\n        <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n        <cp:coreProperties\n          xmlns:cp=\"${namespaces.coreProperties}\"\n          xmlns:dc=\"${namespaces.dc}\"\n          xmlns:dcterms=\"${namespaces.dcterms}\"\n          xmlns:dcmitype=\"${namespaces.dcmitype}\"\n          xmlns:xsi=\"${namespaces.xsi}\"\n          >\n            <dc:title>${title}</dc:title>\n            <dc:subject>${subject}</dc:subject>\n            <dc:creator>${creator}</dc:creator>\n            ${\n              keywords && Array.isArray(keywords)\n                ? `<cp:keywords>${keywords.join(', ')}</cp:keywords>`\n                : ''\n            }\n            <dc:description>${description}</dc:description>\n            <cp:lastModifiedBy>${lastModifiedBy}</cp:lastModifiedBy>\n            <cp:revision>${revision}</cp:revision>\n            <dcterms:created xsi:type=\"dcterms:W3CDTF\">${\n              createdAt instanceof Date ? createdAt.toISOString() : new Date().toISOString()\n            }</dcterms:created>\n            <dcterms:modified xsi:type=\"dcterms:W3CDTF\">${\n              modifiedAt instanceof Date ? modifiedAt.toISOString() : new Date().toISOString()\n            }</dcterms:modified>\n        </cp:coreProperties>\n    `;\n};\n\nexport default generateCoreXML;\n","import { namespaces } from '../helpers';\n\nconst documentRelsXML = `\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n  <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n    <Relationship Id=\"rId1\" Type=\"${namespaces.numbering}\" Target=\"numbering.xml\"/>\n    <Relationship Id=\"rId2\" Type=\"${namespaces.styles}\" Target=\"styles.xml\"/>\n    <Relationship Id=\"rId3\" Type=\"${namespaces.settingsRelation}\" Target=\"settings.xml\"/>\n    <Relationship Id=\"rId4\" Type=\"${namespaces.webSettingsRelation}\" Target=\"webSettings.xml\"/>\n  </Relationships>\n`;\n\nexport default documentRelsXML;\n","import { namespaces } from '../helpers';\n\nconst relsXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n        <Relationship Id=\"rId1\" Type=\"${namespaces.officeDocumentRelation}\" Target=\"word/document.xml\"/>\n        <Relationship Id=\"rId2\" Type=\"${namespaces.corePropertiesRelation}\" Target=\"docProps/core.xml\"/>\n    </Relationships>\n`;\n\nexport default relsXML;\n","import { namespaces } from '../helpers';\n\nconst fontTableXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <w:fonts\n      xmlns:r=\"${namespaces.r}\"\n      xmlns:w=\"${namespaces.w}\"\n      >\n        <w:font w:name=\"Calibri\">\n            <w:panose1 w:val=\"020F0502020204030204\"/>\n            <w:charset w:val=\"00\"/>\n            <w:family w:val=\"swiss\"/>\n            <w:pitch w:val=\"variable\"/>\n            <w:sig w:usb0=\"E4002EFF\" w:usb1=\"C000247B\" w:usb2=\"00000009\" w:usb3=\"00000000\" w:csb0=\"000001FF\" w:csb1=\"00000000\"/>\n        </w:font>\n        <w:font w:name=\"Times New Roman\">\n            <w:panose1 w:val=\"02020603050405020304\"/>\n            <w:charset w:val=\"00\"/>\n            <w:family w:val=\"roman\"/>\n            <w:pitch w:val=\"variable\"/>\n            <w:sig w:usb0=\"E0002EFF\" w:usb1=\"C000785B\" w:usb2=\"00000009\" w:usb3=\"00000000\" w:csb0=\"000001FF\" w:csb1=\"00000000\"/>\n        </w:font>\n        <w:font w:name=\"Calibri Light\">\n            <w:panose1 w:val=\"020F0302020204030204\"/>\n            <w:charset w:val=\"00\"/>\n            <w:family w:val=\"swiss\"/>\n            <w:pitch w:val=\"variable\"/>\n            <w:sig w:usb0=\"E4002EFF\" w:usb1=\"C000247B\" w:usb2=\"00000009\" w:usb3=\"00000000\" w:csb0=\"000001FF\" w:csb1=\"00000000\"/>\n        </w:font>\n    </w:fonts>\n`;\n\nexport default fontTableXML;\n","import { namespaces } from '../helpers';\n\nconst settingsXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <w:settings xmlns:w=\"${namespaces.w}\" xmlns:o=\"${namespaces.o}\" xmlns:r=\"${namespaces.r}\" xmlns:v=\"${namespaces.v}\" xmlns:w10=\"${namespaces.w10}\" xmlns:sl=\"${namespaces.sl}\">\n        <w:zoom w:percent=\"100\"/>\n        <w:defaultTabStop w:val=\"720\"/>\n        <w:decimalSymbol w:val=\".\"/>\n        <w:listSeparator w:val=\",\"/>\n    </w:settings>\n`;\n\nexport default settingsXML;\n","import { namespaces } from '../helpers';\n\nconst webSettingsXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <w:webSettings xmlns:w=\"${namespaces.w}\" xmlns:r=\"${namespaces.r}\">\n    </w:webSettings>\n`;\n\nexport default webSettingsXML;\n","import { create, fragment } from 'xmlbuilder2';\n\nimport {\n  generateCoreXML,\n  generateStylesXML,\n  generateNumberingXMLTemplate,\n  documentRelsXML as documentRelsXMLString,\n  settingsXML as settingsXMLString,\n  webSettingsXML as webSettingsXMLString,\n  contentTypesXML as contentTypesXMLString,\n  fontTableXML as fontTableXMLString,\n  genericRelsXML as genericRelsXMLString,\n} from './schemas';\nimport { convertVTreeToXML, namespaces } from './helpers';\nimport generateDocumentTemplate from '../template/document.template';\n\nconst crypto = require('crypto');\n\nconst landscapeMargins = {\n  top: 1800,\n  right: 1440,\n  bottom: 1800,\n  left: 1440,\n  header: 720,\n  footer: 720,\n  gutter: 0,\n};\n\nconst portraitMargins = {\n  top: 1440,\n  right: 1800,\n  bottom: 1440,\n  left: 1800,\n  header: 720,\n  footer: 720,\n  gutter: 0,\n};\n\nclass DocxDocument {\n  constructor({\n    zip,\n    htmlString,\n    orientation,\n    margins,\n    title,\n    subject,\n    creator,\n    keywords,\n    description,\n    lastModifiedBy,\n    revision,\n    createdAt,\n    modifiedAt,\n    headerType,\n    header,\n    font,\n    fontSize,\n    complexScriptFontSize,\n    table,\n  }) {\n    this.zip = zip;\n    this.htmlString = htmlString;\n    this.orientation = orientation;\n    this.width = orientation === 'landscape' ? 15840 : 12240;\n    this.height = orientation === 'landscape' ? 12240 : 15840;\n    this.margins =\n      // eslint-disable-next-line no-nested-ternary\n      margins && Object.keys(margins).length\n        ? margins\n        : orientation === 'landscape'\n        ? landscapeMargins\n        : portraitMargins;\n    this.availableDocumentSpace = this.width - this.margins.left - this.margins.right;\n    this.title = title || '';\n    this.subject = subject || '';\n    this.creator = creator || 'html-to-docx';\n    this.keywords = keywords || ['html-to-docx'];\n    this.description = description || '';\n    this.lastModifiedBy = lastModifiedBy || 'html-to-docx';\n    this.revision = revision || 1;\n    this.createdAt = createdAt || new Date();\n    this.modifiedAt = modifiedAt || new Date();\n    this.headerType = headerType || 'default';\n    this.header = header || false;\n    this.font = font || 'Times New Roman';\n    this.fontSize = fontSize || 22;\n    this.complexScriptFontSize = complexScriptFontSize || 22;\n    this.tableRowCantSplit = (table && table.row && table.row.cantSplit) || false;\n\n    this.lastNumberingId = 0;\n    this.lastMediaId = 0;\n    this.lastHeaderId = 0;\n    this.stylesObjects = [];\n    this.numberingObjects = [];\n    this.relationshipFilename = 'document';\n    this.relationships = [{ fileName: 'document', lastRelsId: 4, rels: [] }];\n    this.mediaFiles = [];\n    this.headerObjects = [];\n    this.documentXML = null;\n\n    this.generateContentTypesXML = this.generateContentTypesXML.bind(this);\n    this.generateCoreXML = this.generateCoreXML.bind(this);\n    this.generateDocumentXML = this.generateDocumentXML.bind(this);\n    this.generateSettingsXML = this.generateSettingsXML.bind(this);\n    this.generateWebSettingsXML = this.generateWebSettingsXML.bind(this);\n    this.generateStylesXML = this.generateStylesXML.bind(this);\n    this.generateFontTableXML = this.generateFontTableXML.bind(this);\n    this.generateNumberingXML = this.generateNumberingXML.bind(this);\n    this.generateRelsXML = this.generateRelsXML.bind(this);\n    this.createMediaFile = this.createMediaFile.bind(this);\n    this.createDocumentRelationships = this.createDocumentRelationships.bind(this);\n    this.generateHeaderXML = this.generateHeaderXML.bind(this);\n  }\n\n  generateContentTypesXML() {\n    const contentTypesXML = create({ encoding: 'UTF-8', standalone: true }, contentTypesXMLString);\n\n    if (this.headerObjects && Array.isArray(this.headerObjects) && this.headerObjects.length) {\n      this.headerObjects.forEach(\n        // eslint-disable-next-line array-callback-return\n        ({ headerId }) => {\n          const contentTypesFragment = fragment({\n            defaultNamespace: {\n              ele: 'http://schemas.openxmlformats.org/package/2006/content-types',\n            },\n          })\n            .ele('Override')\n            .att('PartName', `/word/header${headerId}.xml`)\n            .att(\n              'ContentType',\n              'application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml'\n            )\n            .up();\n          contentTypesXML.root().import(contentTypesFragment);\n        }\n      );\n    }\n\n    return contentTypesXML.toString({ prettyPrint: true });\n  }\n\n  generateCoreXML() {\n    const coreXML = create(\n      { encoding: 'UTF-8', standalone: true },\n      generateCoreXML(\n        this.title,\n        this.subject,\n        this.creator,\n        this.keywords,\n        this.description,\n        this.lastModifiedBy,\n        this.revision,\n        this.createdAt,\n        this.modifiedAt\n      )\n    );\n\n    return coreXML.toString({ prettyPrint: true });\n  }\n\n  generateDocumentXML() {\n    const documentXML = create(\n      { encoding: 'UTF-8', standalone: true },\n      generateDocumentTemplate(this.width, this.height, this.orientation, this.margins)\n    );\n    documentXML.root().first().import(this.documentXML);\n\n    if (\n      this.header &&\n      this.headerObjects &&\n      Array.isArray(this.headerObjects) &&\n      this.headerObjects.length\n    ) {\n      const headerXmlFragment = fragment();\n\n      this.headerObjects.forEach(\n        // eslint-disable-next-line array-callback-return\n        ({ relationshipId, type }) => {\n          const headerFragment = fragment({\n            namespaceAlias: {\n              w: namespaces.w,\n              r: namespaces.r,\n            },\n          })\n            .ele('@w', 'headerReference')\n            .att('@r', 'id', `rId${relationshipId}`)\n            .att('@w', 'type', type)\n            .up();\n          headerXmlFragment.import(headerFragment);\n        }\n      );\n\n      documentXML.root().first().first().import(headerXmlFragment);\n    }\n\n    return documentXML.toString({ prettyPrint: true });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  generateSettingsXML() {\n    const settingsXML = create({ encoding: 'UTF-8', standalone: true }, settingsXMLString);\n\n    return settingsXML.toString({ prettyPrint: true });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  generateWebSettingsXML() {\n    const webSettingsXML = create({ encoding: 'UTF-8', standalone: true }, webSettingsXMLString);\n\n    return webSettingsXML.toString({ prettyPrint: true });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  generateStylesXML() {\n    const stylesXML = create(\n      { encoding: 'UTF-8', standalone: true },\n      generateStylesXML(this.font, this.fontSize, this.complexScriptFontSize)\n    );\n\n    return stylesXML.toString({ prettyPrint: true });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  generateFontTableXML() {\n    const fontTableXML = create({ encoding: 'UTF-8', standalone: true }, fontTableXMLString);\n\n    return fontTableXML.toString({ prettyPrint: true });\n  }\n\n  generateNumberingXML() {\n    const numberingXML = create(\n      { encoding: 'UTF-8', standalone: true },\n      generateNumberingXMLTemplate()\n    );\n\n    const abstractNumberingFragments = fragment();\n    const numberingFragments = fragment();\n\n    this.numberingObjects.forEach(\n      // eslint-disable-next-line array-callback-return\n      ({ numberingId, listElements }) => {\n        const abstractNumberingFragment = fragment({\n          namespaceAlias: { w: namespaces.w },\n        })\n          .ele('@w', 'abstractNum')\n          .att('@w', 'abstractNumId', String(numberingId))\n          .ele('@w', 'multiLevelType')\n          .att('@w', 'val', 'hybridMultilevel')\n          .up();\n\n        listElements\n          .filter((value, index, self) => {\n            return self.findIndex((v) => v.level === value.level) === index;\n          })\n          .forEach(({ level, type }) => {\n            const levelFragment = fragment({\n              namespaceAlias: { w: namespaces.w },\n            })\n              .ele('@w', 'lvl')\n              .att('@w', 'ilvl', level)\n              .ele('@w', 'start')\n              .att('@w', 'val', '1')\n              .up()\n              .ele('@w', 'numFmt')\n              .att('@w', 'val', type === 'ol' ? 'decimal' : 'bullet')\n              .up()\n              .ele('@w', 'lvlText')\n              .att('@w', 'val', type === 'ol' ? `%${level + 1}` : '')\n              .up()\n              .ele('@w', 'lvlJc')\n              .att('@w', 'val', 'left')\n              .up()\n              .ele('@w', 'pPr')\n              .ele('@w', 'tabs')\n              .ele('@w', 'tab')\n              .att('@w', 'val', 'num')\n              .att('@w', 'pos', (level + 1) * 720)\n              .up()\n              .up()\n              .ele('@w', 'ind')\n              .att('@w', 'left', (level + 1) * 720)\n              .att('@w', 'hanging', 360)\n              .up()\n              .up()\n              .up();\n\n            if (type === 'ul') {\n              const runPropertiesFragment = fragment({\n                namespaceAlias: { w: namespaces.w },\n              })\n                .ele('@w', 'rPr')\n                .ele('@w', 'rFonts')\n                .att('@w', 'ascii', 'Wingdings')\n                .att('@w', 'hAnsi', 'Wingdings')\n                .att('@w', 'hint', 'default')\n                .up()\n                .up();\n\n              levelFragment.last().import(runPropertiesFragment);\n            }\n\n            abstractNumberingFragment.import(levelFragment);\n          });\n\n        abstractNumberingFragment.up();\n\n        const numberingFragment = fragment({\n          namespaceAlias: { w: namespaces.w },\n        })\n          .ele('@w', 'num')\n          .att('@w', 'numId', String(numberingId))\n          .ele('@w', 'abstractNumId')\n          .att('@w', 'val', String(numberingId))\n          .up()\n          .up();\n\n        abstractNumberingFragments.import(abstractNumberingFragment);\n        numberingFragments.import(numberingFragment);\n      }\n    );\n\n    numberingXML.root().import(abstractNumberingFragments);\n    numberingXML.root().import(numberingFragments);\n\n    return numberingXML.toString({ prettyPrint: true });\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  appendRelationships(xmlFragment, relationships) {\n    relationships.forEach(\n      // eslint-disable-next-line array-callback-return\n      ({ relationshipId, type, target, targetMode }) => {\n        const relationshipFragment = fragment({\n          defaultNamespace: { ele: 'http://schemas.openxmlformats.org/package/2006/relationships' },\n        })\n          .ele('Relationship')\n          .att('Id', `rId${relationshipId}`)\n          .att('Type', type)\n          .att('Target', target)\n          .att('TargetMode', targetMode)\n          .up();\n\n        xmlFragment.import(relationshipFragment);\n      }\n    );\n  }\n\n  generateRelsXML() {\n    const relationshipXMLStrings = this.relationships.map(({ fileName, rels }) => {\n      let xmlFragment;\n      if (fileName === 'document') {\n        xmlFragment = create({ encoding: 'UTF-8', standalone: true }, documentRelsXMLString);\n      } else {\n        xmlFragment = create({ encoding: 'UTF-8', standalone: true }, genericRelsXMLString);\n      }\n      this.appendRelationships(xmlFragment.root(), rels);\n\n      return {\n        fileName,\n        xmlString: xmlFragment.toString({ prettyPrint: true }),\n      };\n    });\n\n    return relationshipXMLStrings;\n  }\n\n  createNumbering(listElements) {\n    this.lastNumberingId += 1;\n    this.numberingObjects.push({ numberingId: this.lastNumberingId, listElements });\n\n    return this.lastNumberingId;\n  }\n\n\n  createMediaFile(base64String) {\n    // eslint-disable-next-line no-useless-escape\n    const matches = base64String.match(/^data:([A-Za-z-+\\/]+);base64,(.+)$/);\n    if (matches.length !== 3) {\n      throw new Error('Invalid base64 string');\n    }\n\n    const base64FileContent = matches[2];\n    // matches array contains file type in base64 format - image/jpeg and base64 stringified data\n    let fileExtension =\n      matches[1].match(/\\/(.*?)$/)[1] === 'octet-stream' ? 'png' : matches[1].match(/\\/(.*?)$/)[1];\n    if (fileExtension.indexOf('svg') !== -1) {\n      fileExtension = 'svg';\n    }\n\n    const SHA1String = crypto.createHash('sha1').update(crypto.randomBytes(20)).digest('hex');\n\n    const files = [];\n    let fileNameWithExtension = `image-${SHA1String}.${fileExtension}`;\n    this.lastMediaId += 1;\n\n    files.push({id: this.lastMediaId, fileContent: base64FileContent, fileNameWithExtension});\n\n    if (fileExtension === 'svg') {\n      fileNameWithExtension = `image-${SHA1String}.png`;\n      files.push({id: this.lastMediaId, fileContent: base64FileContent, fileNameWithExtension});\n      this.lastMediaId += 1;\n    }\n    return files;\n  }\n\n  createDocumentRelationships(fileName = 'document', type, target, targetMode = 'External') {\n    let relationshipObject = this.relationships.find(\n      (relationship) => relationship.fileName === fileName\n    );\n    let lastRelsId = 1;\n    if (relationshipObject) {\n      lastRelsId = relationshipObject.lastRelsId + 1;\n      relationshipObject.lastRelsId = lastRelsId;\n    } else {\n      relationshipObject = { fileName, lastRelsId, rels: [] };\n      this.relationships.push(relationshipObject);\n    }\n    let relationshipType;\n    switch (type) {\n      case 'hyperlink':\n        relationshipType = namespaces.hyperlinks;\n        break;\n      case 'image':\n        relationshipType = namespaces.images;\n        break;\n      case 'header':\n        relationshipType = namespaces.headers;\n        break;\n      default:\n        break;\n    }\n\n    relationshipObject.rels.push({\n      relationshipId: lastRelsId,\n      type: relationshipType,\n      target,\n      targetMode,\n    });\n\n    return lastRelsId;\n  }\n\n  generateHeaderXML(vTree) {\n    const headerXML = create({\n      encoding: 'UTF-8',\n      standalone: true,\n      namespaceAlias: {\n        w: namespaces.w,\n        ve: namespaces.ve,\n        o: namespaces.o,\n        r: namespaces.r,\n        v: namespaces.v,\n        wp: namespaces.wp,\n        w10: namespaces.w10,\n      },\n    }).ele('@w', 'hdr');\n\n    const XMLFragment = fragment();\n    convertVTreeToXML(this, vTree, XMLFragment);\n    headerXML.root().import(XMLFragment);\n\n    this.lastHeaderId += 1;\n\n    return { headerId: this.lastHeaderId, headerXML };\n  }\n}\n\nexport default DocxDocument;\n","import { namespaces } from '../src/helpers';\n\nconst generateDocumentTemplate = (width, height, orientation, margins) => {\n  return `\n  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <w:document\n        xmlns:a=\"${namespaces.a}\"\n        xmlns:cdr=\"${namespaces.cdr}\"\n        xmlns:o=\"${namespaces.o}\"\n        xmlns:pic=\"${namespaces.pic}\"\n        xmlns:r=\"${namespaces.r}\"\n        xmlns:v=\"${namespaces.v}\"\n        xmlns:ve=\"${namespaces.ve}\"\n        xmlns:vt=\"${namespaces.vt}\"\n        xmlns:w=\"${namespaces.w}\"\n        xmlns:w10=\"${namespaces.w10}\"\n        xmlns:wp=\"${namespaces.wp}\"\n        xmlns:wne=\"${namespaces.wne}\"\n        >\n        <w:body>\n            <w:sectPr>\n                <w:pgSz w:w=\"${width}\" w:h=\"${height}\" w:orient=\"${orientation}\" />\n                <w:pgMar w:top=\"${margins.top}\"\n                        w:right=\"${margins.right}\"\n                        w:bottom=\"${margins.bottom}\"\n                        w:left=\"${margins.left}\"\n                        w:header=\"${margins.header}\"\n                        w:footer=\"${margins.footer}\"\n                        w:gutter=\"${margins.gutter}\"/>\n            </w:sectPr>\n        </w:body>\n    </w:document>\n  `;\n};\n\nexport default generateDocumentTemplate;\n","import { namespaces } from '../helpers';\n\nconst generateStylesXML = (font = 'Times New Roman', fontSize = 22, complexScriptFontSize = 22) => {\n  return `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <w:styles\n      xmlns:w=\"${namespaces.w}\"\n      xmlns:r=\"${namespaces.r}\" >\n        <w:docDefaults>\n          <w:rPrDefault>\n            <w:rPr>\n              <w:rFonts w:ascii=\"${font}\" w:eastAsiaTheme=\"minorHAnsi\" w:hAnsiTheme=\"minorHAnsi\" w:cstheme=\"minorBidi\" />\n              <w:sz w:val=\"${fontSize}\"/>\n              <w:szCs w:val=\"${complexScriptFontSize}\"/>\n              <w:lang w:val=\"en-US\" w:eastAsia=\"en-US\" w:bidi=\"ar-SA\"/>\n            </w:rPr>\n          </w:rPrDefault>\n          <w:pPrDefault>\n            <w:pPr>\n              <w:spacing w:after=\"120\" w:line=\"240\" w:lineRule=\"atLeast\"/>\n            </w:pPr>\n          </w:pPrDefault>\n        </w:docDefaults>\n    </w:styles>\n  `;\n};\n\nexport default generateStylesXML;\n","import { namespaces } from '../helpers';\n\nconst generateNumberingXMLTemplate = () => {\n  return `\n        <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n        <w:numbering\n        xmlns:w=\"${namespaces.w}\"\n        xmlns:ve=\"${namespaces.ve}\"\n        xmlns:o=\"${namespaces.o}\"\n        xmlns:r=\"${namespaces.r}\"\n        xmlns:v=\"${namespaces.v}\"\n        xmlns:wp=\"${namespaces.wp}\"\n        xmlns:w10=\"${namespaces.w10}\"\n        xmlns:wne=\"${namespaces.wne}\">\n        </w:numbering>\n    `;\n};\n\nexport default generateNumberingXMLTemplate;\n","const genericRelsXML = `\n    <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n\n    <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n    </Relationships>\n`;\n\nexport default genericRelsXML;\n","import { create } from 'xmlbuilder2';\n\nimport { relsXML } from './schemas';\nimport DocxDocument from './docx-document';\nimport { renderDocumentFile } from './helpers';\nimport {\n  pixelRegex,\n  pixelToTWIP,\n  cmRegex,\n  cmToTWIP,\n  inchRegex,\n  inchToTWIP,\n  pointRegex,\n  pointToHIP,\n} from './utils/unit-conversion';\n\nconst VNode = require('virtual-dom/vnode/vnode');\nconst VText = require('virtual-dom/vnode/vtext');\nconst convertHTML = require('html-to-vdom')({\n  VNode,\n  VText,\n});\n\nconst defaultDocumentOptions = {\n  orientation: 'portrait',\n  margins: {\n    top: 1440,\n    right: 1800,\n    bottom: 1440,\n    left: 1800,\n    header: 720,\n    footer: 720,\n    gutter: 0,\n  },\n  title: '',\n  subject: '',\n  creator: 'html-to-docx',\n  keywords: ['html-to-docx'],\n  description: '',\n  lastModifiedBy: 'html-to-docx',\n  revision: 1,\n  createdAt: new Date(),\n  modifiedAt: new Date(),\n  headerType: 'default',\n  header: false,\n  font: 'Times New Roman',\n  fontSize: 22,\n  complexScriptFontSize: 22,\n  table: {\n    row: {\n      cantSplit: false,\n    },\n  },\n};\n\nconst mergeOptions = (options, patch) => ({ ...options, ...patch });\n\nconst fixupFontSize = (fontSize) => {\n  let normalizedFontSize;\n  if (pointRegex.test(fontSize)) {\n    const matchedParts = fontSize.match(pointRegex);\n\n    normalizedFontSize = pointToHIP(matchedParts[1]);\n  } else if (fontSize) {\n    // assuming it is already in HIP\n    normalizedFontSize = fontSize;\n  } else {\n    normalizedFontSize = null;\n  }\n\n  return normalizedFontSize;\n};\n\nconst fixupMargins = (margins) => {\n  let normalizedMargins = {};\n  if (typeof margins === 'object' && margins !== null) {\n    Object.keys(margins).forEach((key) => {\n      if (pixelRegex.test(margins[key])) {\n        const matchedParts = margins[key].match(pixelRegex);\n        normalizedMargins[key] = pixelToTWIP(matchedParts[1]);\n      } else if (cmRegex.test(margins[key])) {\n        const matchedParts = margins[key].match(cmRegex);\n        normalizedMargins[key] = cmToTWIP(matchedParts[1]);\n      } else if (inchRegex.test(margins[key])) {\n        const matchedParts = margins[key].match(inchRegex);\n        normalizedMargins[key] = inchToTWIP(matchedParts[1]);\n      } else if (margins[key]) {\n        normalizedMargins[key] = margins[key];\n      } else {\n        // incase value is something like 0\n        normalizedMargins[key] = defaultDocumentOptions.margins[key];\n      }\n    });\n  } else {\n    // eslint-disable-next-line no-param-reassign\n    normalizedMargins = null;\n  }\n\n  return normalizedMargins;\n};\n\nconst normalizeDocumentOptions = (documentOptions) => {\n  const normalizedDocumentOptions = { ...documentOptions };\n  Object.keys(documentOptions).forEach((key) => {\n    // eslint-disable-next-line default-case\n    switch (key) {\n      case 'margins':\n        normalizedDocumentOptions.margins = fixupMargins(documentOptions[key]);\n        break;\n      case 'fontSize':\n      case 'complexScriptFontSize':\n        normalizedDocumentOptions[key] = fixupFontSize(documentOptions[key]);\n        break;\n    }\n  });\n\n  return normalizedDocumentOptions;\n};\n\n// Ref: https://en.wikipedia.org/wiki/Office_Open_XML_file_formats\n// http://officeopenxml.com/anatomyofOOXML.php\n// eslint-disable-next-line import/prefer-default-export\nexport function addFilesToContainer(zip, htmlString, suppliedDocumentOptions, headerHTMLString) {\n  const normalizedDocumentOptions = normalizeDocumentOptions(suppliedDocumentOptions);\n  const documentOptions = mergeOptions(defaultDocumentOptions, normalizedDocumentOptions);\n\n  const docxDocument = new DocxDocument({ zip, htmlString, ...documentOptions });\n  // Conversion to Word XML happens here\n  docxDocument.documentXML = renderDocumentFile(docxDocument);\n\n  zip\n    .folder('_rels')\n    .file(\n      '.rels',\n      create({ encoding: 'UTF-8', standalone: true }, relsXML).toString({ prettyPrint: true }),\n      { createFolders: false }\n    );\n\n  zip.folder('docProps').file('core.xml', docxDocument.generateCoreXML(), {\n    createFolders: false,\n  });\n\n  if (docxDocument.header && headerHTMLString) {\n    const vTree = convertHTML(headerHTMLString);\n\n    docxDocument.relationshipFilename = 'header1';\n    const { headerId, headerXML } = docxDocument.generateHeaderXML(vTree);\n    docxDocument.relationshipFilename = 'document';\n\n    const relationshipId = docxDocument.createDocumentRelationships(\n      docxDocument.relationshipFilename,\n      'header',\n      `header${headerId}.xml`,\n      'Internal'\n    );\n\n    zip.folder('word').file(`header${headerId}.xml`, headerXML.toString({ prettyPrint: true }), {\n      createFolders: false,\n    });\n\n    docxDocument.headerObjects.push({ headerId, relationshipId, type: 'default' });\n  }\n\n  zip\n    .folder('word')\n    .file('document.xml', docxDocument.generateDocumentXML(), {\n      createFolders: false,\n    })\n    .file('fontTable.xml', docxDocument.generateFontTableXML(), {\n      createFolders: false,\n    })\n    .file('styles.xml', docxDocument.generateStylesXML(), {\n      createFolders: false,\n    })\n    .file('numbering.xml', docxDocument.generateNumberingXML(), {\n      createFolders: false,\n    })\n    .file('settings.xml', docxDocument.generateSettingsXML(), {\n      createFolders: false,\n    })\n    .file('webSettings.xml', docxDocument.generateWebSettingsXML(), {\n      createFolders: false,\n    });\n\n  const relationshipXMLs = docxDocument.generateRelsXML();\n  if (relationshipXMLs && Array.isArray(relationshipXMLs)) {\n    relationshipXMLs.forEach(({ fileName, xmlString }) => {\n      zip.folder('word').folder('_rels').file(`${fileName}.xml.rels`, xmlString, {\n        createFolders: false,\n      });\n    });\n  }\n\n  zip.file('[Content_Types].xml', docxDocument.generateContentTypesXML(), { createFolders: false });\n\n  return zip;\n}\n","/* eslint-disable no-param-reassign */\nimport JSZip from 'jszip';\nimport { addFilesToContainer } from './src/html-to-docx';\n\nconst { minify } = require('html-minifier');\n\nconst minifyHTMLString = (htmlString) => {\n  if (typeof htmlString === 'string' || htmlString instanceof String) {\n    try {\n      const minifiedHTMLString = minify(htmlString, {\n        caseSensitive: true,\n        collapseWhitespace: true,\n        html5: false,\n        keepClosingSlash: true,\n      });\n\n      return minifiedHTMLString;\n    } catch (error) {\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\n\nasync function generateContainer(htmlString, headerHTMLString, documentOptions = {}) {\n  const zip = new JSZip();\n\n  let contentHTML = htmlString;\n  let headerHTML = headerHTMLString;\n  if (htmlString) {\n    contentHTML = minifyHTMLString(contentHTML);\n  }\n  if (headerHTMLString) {\n    headerHTML = minifyHTMLString(headerHTML);\n  }\n\n  addFilesToContainer(zip, contentHTML, documentOptions, headerHTML);\n\n  const buffer = await zip.generateAsync({ type: 'arraybuffer' });\n  if (Object.prototype.hasOwnProperty.call(global, 'Blob')) {\n    // eslint-disable-next-line no-undef\n    return new Blob([buffer], {\n      type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n    });\n  }\n  if (Object.prototype.hasOwnProperty.call(global, 'Buffer')) {\n    return Buffer.from(new Uint8Array(buffer));\n  }\n  throw new Error(\n    'Add blob support using a polyfill eg https://github.com/bjornstar/blob-polyfill'\n  );\n}\n\nexport default generateContainer;\n"],"names":["namespaces","rgbRegex","hslRegex","hexRegex","hex3Regex","rgbToHex","red","green","blue","map","x","parseInt","toString","length","join","defaultHeadingSizesInPixel","h1","h2","h3","h4","h5","h6","pixelRegex","percentageRegex","pointRegex","cmRegex","inchRegex","pixelToEMU","pixelValue","Math","round","EMUToTWIP","EMUValue","pointToTWIP","pointValue","pointToHIP","pixelToTWIP","pixelToHIP","TWIPValue","inchToTWIP","inchValue","inchToPoint","pixelToPoint","HIPValue","pointToEIP","PointValue","isVNode","require","isVText","colorNames","VText","fixupColorCode","colorCodeString","Object","prototype","hasOwnProperty","call","toLowerCase","test","matchedParts","match","hue","saturation","luminosity","hue2rgb","p","q","t","hex","hslToHex","hex3ToHex","buildShading","colorCode","fragment","namespaceAlias","w","ele","att","up","buildVertAlign","type","buildBold","buildItalics","buildUnderline","buildBorder","borderSide","borderSize","borderSpacing","borderColor","borderStroke","buildTextElement","text","txt","buildRunProperties","attributes","runPropertiesFragment","constructor","keys","forEach","key","boldFragment","import","italicsFragment","underlineFragment","colorFragment","shadingFragment","fontSizeFragment","fontSize","buildTextFormatting","vNode","tagName","color","buildHighlight","buildRun","runFragment","includes","textArray","vNodes","tempVNode","shift","push","formattingFragment","children","slice","concat","combinedString","textFragment","lineBreakFragment","buildLineBreak","inlineOrAnchored","otherAttributes","imageFragment","buildDrawing","fixupLineHeight","lineHeight","isNaN","fixupFontSize","fontSizeString","buildRunOrRuns","runFragments","index","childVNode","modifiedAttributes","properties","style","backgroundColor","buildRunOrHyperLink","docxDocumentInstance","relationshipId","createDocumentRelationships","relationshipFilename","href","hyperlinkFragment","r","Array","isArray","buildHorizontalAlignment","horizontalAlignment","buildParagraphProperties","paragraphPropertiesFragment","levelId","numberingId","numberingPropertiesFragment","String","buildNumberingProperties","numbering","horizontalAlignmentFragment","textAlign","display","paragraphBorderFragment","bordersObject","top","size","spacing","left","bottom","right","borderName","borderFragment","buildParagraphBorder","spacingFragment","lineSpacing","beforeSpacing","afterSpacing","buildSpacing","computeImageDimensions","maximumWidth","originalWidth","originalHeight","aspectRatio","maximumWidthInEMU","modifiedHeight","modifiedWidth","originalWidthInEMU","originalHeightInEMU","width","percentageValue","height","mathFonts","ctrlPr","mathFragment","m","buildMathTextElement","build_mr","isSet_m_rPr","mf_r","child1","i","console","log","buildChildMath","fPrFragment","fPr","m_f_num","vNode1","childFragment","vNode2","m_f_den","sSupPrFragment","sSupPr","e_vNode","mf_e","mf_e_r","mf_sup","mf_sup_r","sup_vNode","child2","buildMathPara","docxDocumentInstanc","math","buildMath","buildParagraph","paragraphFragment","verticalAlign","strong","runOrHyperlinkFragments","iteratorIndex","runOrHyperlinkFragment","buildTableCellProperties","tableCellPropertiesFragment","verticalAlignmentFragment","verticalAlignment","buildVerticalAlignment","gridSpanFragment","spanValue","colSpan","tableCellBorderFragment","tableCellBorder","tableCellBordersFragment","stroke","borders","border","buildTableCellBorders","fixupTableCellBorder","cssBorderParser","buildTableCell","tableCellFragment","buildImage","grandChildVNode","buildTableRowProperties","tableRowPropertiesFragment","tableRowHeightFragment","tableRowHeight","rowCantSplit","cantSplitFragment","buildTableRow","tableRowFragment","rowHeightString","fixupRowHeight","undefined","tableColumns","filter","columnWidth","availableDocumentSpace","buildTableGridCol","gridWidth","buildTableGrid","tableGridFragment","gridColumns","tableGridColFragment","buildCellMargin","side","margin","buildTableProperties","tablePropertiesFragment","tableBordersFragment","tableBorder","buildTableBorders","tableCellSpacingFragment","cellSpacing","buildTableCellSpacing","tableCellSpacing","tableWidthFragment","tableWidth","tableCellMarginFragment","tableCellMarFragment","marginFragment","buildTableCellMargins","alignmentFragment","borderString","split","toUpperCase","buildTable","tableFragment","tableAttributes","tableStyles","tableBorders","tableCellBorders","minimumWidth","borderStrike","cssSize","cssStroke","cssColor","insideV","insideH","lastIndex","min","max","buildGraphicFrameTransform","graphicFrameTransformFragment","a","offsetFragment","extentsFragment","buildExtents","buildShapeProperties","shapeProperties","pic","presetGeometryFragment","buildStretch","stretchFragment","fillRectFragment","buildSrcRectFragment","build_ext","rId_svg","extFragment","svgBlipFragment","asvg","build_svgBlip","extLstFragment","a14","build_useLocalDpi","buildBinaryLargeImageOrPictureSvg","relationshipId_png","relationshipId_svg","binaryLargeImageOrPictureFragment","build_extLstFragment","build_extLst","buildBinaryLargeImageOrPictureFill","binaryLargeImageOrPictureFillFragment","buildBinaryLargeImageOrPicture","srcRectFragment","buildNonVisualPictureProperties","pictureId","pictureNameWithExtension","pictureDescription","nonVisualPicturePropertiesFragment","nonVisualDrawingPropertiesFragment","buildNonVisualDrawingProperties","nonVisualPictureDrawingPropertiesFragment","buildNonVisualPictureDrawingProperties","buildPictureSvg","id","fileNameWithExtension","description","pictureFragment","binaryLargeImageOrPictureFill","buildBinaryLargeImageOrPictureSvgFill","buildGraphicData","graphicType","graphicDataFragment","buildPicture","buildGraphic","graphicFragment","buildDrawingObjectNonVisualProperties","pictureName","wp","buildEffectExtentFragment","buildExtent","buildAnchoredDrawing","anchoredDrawingFragment","simplePosFragment","positionHFragment","positionVFragment","extentFragment","effectExtentFragment","wrapSquareFragment","drawingObjectNonVisualPropertiesFragment","drawingFragment","inlineOrAnchoredDrawingFragment","inlineDrawingFragment","buildInlineDrawing","VNode","escape","sizeOf","createCanvas","Image","convertHTML","createMediaFileFromSvg","base64String","callback","canvas","context","getContext","image","onload","clearRect","drawImage","pngData","toDataURL","src","response","responseArr","createMediaFile","decodeURIComponent","error","zip","folder","file","Buffer","from","fileContent","createFolders","documentRelsId","imageBuffer","imageProperties","xmlBuilder.buildParagraph","ownerImageProperties","ownerRelationshipId","ownerResponse","indexOf","findXMLEquivalent","xmlFragment","class","xmlBuilder.fixupLineHeight","headingFragment","oMathPara","xmlBuilder.buildMathPara","xmlBuilder.buildTable","tableRowCantSplit","emptyParagraphFragment","listElements","vNodeObjects","node","level","tempVNodeObject","reduce","accumulator","paragraphVNode","buildList","createNumbering","listElement","linebreakFragment","convertVTreeToXML","vTree","xmlBuilder.buildTextElement","documentRelsXML","relsXML","fontTableXML","settingsXML","webSettingsXML","crypto","landscapeMargins","header","footer","gutter","portraitMargins","DocxDocument","[object Object]","htmlString","orientation","margins","title","subject","creator","keywords","lastModifiedBy","revision","createdAt","modifiedAt","headerType","font","complexScriptFontSize","table","this","Date","row","cantSplit","lastNumberingId","lastMediaId","lastHeaderId","stylesObjects","numberingObjects","relationships","fileName","lastRelsId","rels","mediaFiles","headerObjects","documentXML","generateContentTypesXML","bind","generateCoreXML","generateDocumentXML","generateSettingsXML","generateWebSettingsXML","generateStylesXML","generateFontTableXML","generateNumberingXML","generateRelsXML","generateHeaderXML","contentTypesXML","create","encoding","standalone","headerId","contentTypesFragment","defaultNamespace","root","prettyPrint","toISOString","first","headerXmlFragment","headerFragment","settingsXMLString","webSettingsXMLString","fontTableXMLString","numberingXML","abstractNumberingFragments","numberingFragments","abstractNumberingFragment","value","self","findIndex","v","levelFragment","last","numberingFragment","target","targetMode","relationshipFragment","documentRelsXMLString","appendRelationships","xmlString","matches","Error","base64FileContent","fileExtension","SHA1String","createHash","update","randomBytes","digest","files","relationshipType","relationshipObject","find","relationship","headerXML","ve","o","w10","XMLFragment","defaultDocumentOptions","fixupMargins","normalizedMargins","cmValue","cmToInch","normalizeDocumentOptions","documentOptions","normalizedDocumentOptions","normalizedFontSize","addFilesToContainer","suppliedDocumentOptions","headerHTMLString","options","patch","docxDocument","relationshipXMLs","minify","minifyHTMLString","caseSensitive","collapseWhitespace","html5","keepClosingSlash","async","JSZip","contentHTML","headerHTML","buffer","generateAsync","global","Blob","Uint8Array"],"mappings":"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"}